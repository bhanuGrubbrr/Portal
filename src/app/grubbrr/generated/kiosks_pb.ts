/* eslint-disable */
// @generated by protobuf-ts 2.9.0 with parameter ts_nocheck,eslint_disable,add_pb_suffix,long_type_string,generate_dependencies
// @generated from protobuf file "kiosks.proto" (package "Mgmt", syntax proto3)
// tslint:disable
// @ts-nocheck
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Timestamp } from "./google/protobuf/timestamp_pb";
/**
 * @generated from protobuf message Mgmt.SyncVersionVM
 */
export interface SyncVersionVM {
    /**
     * @generated from protobuf field: string kioskSyncVersion = 1;
     */
    kioskSyncVersion: string;
}
/**
 * @generated from protobuf message Mgmt.KiosksVM
 */
export interface KiosksVM {
    /**
     * @generated from protobuf field: repeated Mgmt.KioskVM kiosks = 1;
     */
    kiosks: KioskVM[];
    /**
     * @generated from protobuf field: Mgmt.SyncVersionVM syncVersion = 2;
     */
    syncVersion?: SyncVersionVM;
}
/**
 * @generated from protobuf message Mgmt.KioskVM
 */
export interface KioskVM {
    /**
     * @generated from protobuf field: string kioskId = 1;
     */
    kioskId: string;
    /**
     * @generated from protobuf field: string name = 2;
     */
    name: string;
    /**
     * @generated from protobuf field: Mgmt.DeviceDetailsVM deviceDetails = 3;
     */
    deviceDetails?: DeviceDetailsVM;
    /**
     * @generated from protobuf field: string lastSync = 4;
     */
    lastSync: string;
}
/**
 * @generated from protobuf message Mgmt.DeviceDetailsVM
 */
export interface DeviceDetailsVM {
    /**
     * @generated from protobuf field: string appVersion = 1;
     */
    appVersion: string;
    /**
     * @generated from protobuf field: string deviceType = 2;
     */
    deviceType: string;
    /**
     * @generated from protobuf field: string serialNumber = 3;
     */
    serialNumber: string;
    /**
     * @generated from protobuf field: google.protobuf.Timestamp lastLoginTime = 4;
     */
    lastLoginTime?: Timestamp;
}
// @generated message type with reflection information, may provide speed optimized methods
class SyncVersionVM$Type extends MessageType<SyncVersionVM> {
    constructor() {
        super("Mgmt.SyncVersionVM", [
            { no: 1, name: "kioskSyncVersion", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<SyncVersionVM>): SyncVersionVM {
        const message = { kioskSyncVersion: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SyncVersionVM>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SyncVersionVM): SyncVersionVM {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string kioskSyncVersion */ 1:
                    message.kioskSyncVersion = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SyncVersionVM, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string kioskSyncVersion = 1; */
        if (message.kioskSyncVersion !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.kioskSyncVersion);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message Mgmt.SyncVersionVM
 */
export const SyncVersionVM = new SyncVersionVM$Type();
// @generated message type with reflection information, may provide speed optimized methods
class KiosksVM$Type extends MessageType<KiosksVM> {
    constructor() {
        super("Mgmt.KiosksVM", [
            { no: 1, name: "kiosks", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => KioskVM },
            { no: 2, name: "syncVersion", kind: "message", T: () => SyncVersionVM }
        ]);
    }
    create(value?: PartialMessage<KiosksVM>): KiosksVM {
        const message = { kiosks: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<KiosksVM>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: KiosksVM): KiosksVM {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated Mgmt.KioskVM kiosks */ 1:
                    message.kiosks.push(KioskVM.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* Mgmt.SyncVersionVM syncVersion */ 2:
                    message.syncVersion = SyncVersionVM.internalBinaryRead(reader, reader.uint32(), options, message.syncVersion);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: KiosksVM, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated Mgmt.KioskVM kiosks = 1; */
        for (let i = 0; i < message.kiosks.length; i++)
            KioskVM.internalBinaryWrite(message.kiosks[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* Mgmt.SyncVersionVM syncVersion = 2; */
        if (message.syncVersion)
            SyncVersionVM.internalBinaryWrite(message.syncVersion, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message Mgmt.KiosksVM
 */
export const KiosksVM = new KiosksVM$Type();
// @generated message type with reflection information, may provide speed optimized methods
class KioskVM$Type extends MessageType<KioskVM> {
    constructor() {
        super("Mgmt.KioskVM", [
            { no: 1, name: "kioskId", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "deviceDetails", kind: "message", T: () => DeviceDetailsVM },
            { no: 4, name: "lastSync", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<KioskVM>): KioskVM {
        const message = { kioskId: "", name: "", lastSync: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<KioskVM>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: KioskVM): KioskVM {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string kioskId */ 1:
                    message.kioskId = reader.string();
                    break;
                case /* string name */ 2:
                    message.name = reader.string();
                    break;
                case /* Mgmt.DeviceDetailsVM deviceDetails */ 3:
                    message.deviceDetails = DeviceDetailsVM.internalBinaryRead(reader, reader.uint32(), options, message.deviceDetails);
                    break;
                case /* string lastSync */ 4:
                    message.lastSync = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: KioskVM, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string kioskId = 1; */
        if (message.kioskId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.kioskId);
        /* string name = 2; */
        if (message.name !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.name);
        /* Mgmt.DeviceDetailsVM deviceDetails = 3; */
        if (message.deviceDetails)
            DeviceDetailsVM.internalBinaryWrite(message.deviceDetails, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* string lastSync = 4; */
        if (message.lastSync !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.lastSync);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message Mgmt.KioskVM
 */
export const KioskVM = new KioskVM$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DeviceDetailsVM$Type extends MessageType<DeviceDetailsVM> {
    constructor() {
        super("Mgmt.DeviceDetailsVM", [
            { no: 1, name: "appVersion", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "deviceType", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "serialNumber", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "lastLoginTime", kind: "message", T: () => Timestamp }
        ]);
    }
    create(value?: PartialMessage<DeviceDetailsVM>): DeviceDetailsVM {
        const message = { appVersion: "", deviceType: "", serialNumber: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<DeviceDetailsVM>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DeviceDetailsVM): DeviceDetailsVM {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string appVersion */ 1:
                    message.appVersion = reader.string();
                    break;
                case /* string deviceType */ 2:
                    message.deviceType = reader.string();
                    break;
                case /* string serialNumber */ 3:
                    message.serialNumber = reader.string();
                    break;
                case /* google.protobuf.Timestamp lastLoginTime */ 4:
                    message.lastLoginTime = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.lastLoginTime);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DeviceDetailsVM, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string appVersion = 1; */
        if (message.appVersion !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.appVersion);
        /* string deviceType = 2; */
        if (message.deviceType !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.deviceType);
        /* string serialNumber = 3; */
        if (message.serialNumber !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.serialNumber);
        /* google.protobuf.Timestamp lastLoginTime = 4; */
        if (message.lastLoginTime)
            Timestamp.internalBinaryWrite(message.lastLoginTime, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message Mgmt.DeviceDetailsVM
 */
export const DeviceDetailsVM = new DeviceDetailsVM$Type();
