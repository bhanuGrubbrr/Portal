/* eslint-disable */
// @generated by protobuf-ts 2.9.0 with parameter ts_nocheck,eslint_disable,add_pb_suffix,long_type_string,generate_dependencies
// @generated from protobuf file "appearance.proto" (package "Mgmt", syntax proto3)
// tslint:disable
// @ts-nocheck
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { PhoneNumberVM } from "./common_pb";
import { AddressVM } from "./common_pb";
/**
 * @generated from protobuf message Mgmt.AppearanceVM
 */
export interface AppearanceVM {
    /**
     * @generated from protobuf field: Mgmt.KioskColorsVM colors = 1;
     */
    colors?: KioskColorsVM;
    /**
     * @generated from protobuf field: Mgmt.TemplateConfigVM template = 2;
     */
    template?: TemplateConfigVM;
    /**
     * @generated from protobuf field: Mgmt.ReceiptSettingsVM receipts = 3;
     */
    receipts?: ReceiptSettingsVM;
}
/**
 * @generated from protobuf message Mgmt.KioskColorsVM
 */
export interface KioskColorsVM {
    /**
     * @generated from protobuf field: string primary = 1;
     */
    primary: string;
    /**
     * @generated from protobuf field: string onPrimary = 2;
     */
    onPrimary: string;
    /**
     * @generated from protobuf field: string secondary = 3;
     */
    secondary: string;
    /**
     * @generated from protobuf field: string onSecondary = 4;
     */
    onSecondary: string;
    /**
     * @generated from protobuf field: string tertiary = 5;
     */
    tertiary: string;
    /**
     * @generated from protobuf field: string onTertiary = 6;
     */
    onTertiary: string;
    /**
     * @generated from protobuf field: string surface = 7;
     */
    surface: string;
    /**
     * @generated from protobuf field: string onSurface = 8;
     */
    onSurface: string;
    /**
     * @generated from protobuf field: string background = 9;
     */
    background: string;
    /**
     * @generated from protobuf field: string onBackground = 10;
     */
    onBackground: string;
    /**
     * @generated from protobuf field: string error = 11;
     */
    error: string;
    /**
     * @generated from protobuf field: string onError = 12;
     */
    onError: string;
}
/**
 * @generated from protobuf message Mgmt.LoyaltyColorsVM
 */
export interface LoyaltyColorsVM {
    /**
     * @generated from protobuf field: string onLoyaltyAccent = 1;
     */
    onLoyaltyAccent: string;
    /**
     * @generated from protobuf field: string loyaltyAccent = 2;
     */
    loyaltyAccent: string;
    /**
     * @generated from protobuf field: string loyalty = 3;
     */
    loyalty: string;
    /**
     * @generated from protobuf field: string onLoyalty = 4;
     */
    onLoyalty: string;
    /**
     * @generated from protobuf field: string loyaltyBackground = 5;
     */
    loyaltyBackground: string;
}
/**
 * @generated from protobuf message Mgmt.TemplateConfigVM
 */
export interface TemplateConfigVM {
    /**
     * @generated from protobuf field: string templateId = 1;
     */
    templateId: string;
    /**
     * @generated from protobuf field: Mgmt.TemplateSettingsVM settings = 2;
     */
    settings?: TemplateSettingsVM;
    /**
     * @generated from protobuf field: Mgmt.ScreensaversVM screensavers = 3;
     */
    screensavers?: ScreensaversVM;
    /**
     * @generated from protobuf field: Mgmt.TemplateTextVM text = 4;
     */
    text?: TemplateTextVM;
    /**
     * @generated from protobuf field: Mgmt.TemplateImagesVM images = 5;
     */
    images?: TemplateImagesVM;
    /**
     * @generated from protobuf field: Mgmt.AnimationsVM animations = 6;
     */
    animations?: AnimationsVM;
}
/**
 * @generated from protobuf message Mgmt.TemplateSettingsVM
 */
export interface TemplateSettingsVM {
    /**
     * @generated from protobuf field: map<string, string> options = 1;
     */
    options: {
        [key: string]: string;
    };
}
/**
 * @generated from protobuf message Mgmt.TemplateTextVM
 */
export interface TemplateTextVM {
    /**
     * @generated from protobuf field: repeated Mgmt.TemplateLanguageTextVM default = 1;
     */
    default: TemplateLanguageTextVM[];
    /**
     * @generated from protobuf field: repeated Mgmt.TemplateLanguageTextVM overrides = 2;
     */
    overrides: TemplateLanguageTextVM[];
}
/**
 * @generated from protobuf message Mgmt.TemplateLanguageTextVM
 */
export interface TemplateLanguageTextVM {
    /**
     * @generated from protobuf field: string languageCode = 1;
     */
    languageCode: string;
    /**
     * @generated from protobuf field: map<string, string> strings = 2;
     */
    strings: {
        [key: string]: string;
    };
}
/**
 * @generated from protobuf message Mgmt.TemplateImagesVM
 */
export interface TemplateImagesVM {
    /**
     * @generated from protobuf field: Mgmt.AppearanceMediaAssetVM defaultCategoryHeaderImage = 1;
     */
    defaultCategoryHeaderImage?: AppearanceMediaAssetVM;
    /**
     * @deprecated
     * @generated from protobuf field: Mgmt.AppearanceMediaAssetVM defaultLoyaltyRewardImage = 2 [deprecated = true];
     */
    defaultLoyaltyRewardImage?: AppearanceMediaAssetVM;
    /**
     * @generated from protobuf field: Mgmt.LoyaltyMediaVM defaultLoyaltyMedia = 3;
     */
    defaultLoyaltyMedia?: LoyaltyMediaVM;
}
/**
 * @generated from protobuf message Mgmt.AnimationsVM
 */
export interface AnimationsVM {
    /**
     * @generated from protobuf field: Mgmt.AppearanceMediaAssetVM loading = 1;
     */
    loading?: AppearanceMediaAssetVM;
    /**
     * @generated from protobuf field: Mgmt.AppearanceMediaAssetVM orderTimeout = 2;
     */
    orderTimeout?: AppearanceMediaAssetVM;
    /**
     * @generated from protobuf field: Mgmt.AppearanceMediaAssetVM scanQRCode = 3;
     */
    scanQRCode?: AppearanceMediaAssetVM;
    /**
     * @generated from protobuf field: Mgmt.AppearanceMediaAssetVM calculatingOrder = 4;
     */
    calculatingOrder?: AppearanceMediaAssetVM;
    /**
     * @generated from protobuf field: Mgmt.AppearanceMediaAssetVM payWithCard = 5;
     */
    payWithCard?: AppearanceMediaAssetVM;
    /**
     * @generated from protobuf field: Mgmt.AppearanceMediaAssetVM paymentSuccess = 6;
     */
    paymentSuccess?: AppearanceMediaAssetVM;
    /**
     * @generated from protobuf field: Mgmt.AppearanceMediaAssetVM paymentFail = 7;
     */
    paymentFail?: AppearanceMediaAssetVM;
    /**
     * @generated from protobuf field: Mgmt.AppearanceMediaAssetVM storeIsClosed = 8;
     */
    storeIsClosed?: AppearanceMediaAssetVM;
}
/**
 * @generated from protobuf message Mgmt.LoyaltyMediaVM
 */
export interface LoyaltyMediaVM {
    /**
     * @generated from protobuf field: Mgmt.AppearanceMediaAssetVM defaultProfileHeaderImage = 1;
     */
    defaultProfileHeaderImage?: AppearanceMediaAssetVM;
    /**
     * @generated from protobuf field: Mgmt.AppearanceMediaAssetVM defaultTopCornerImage = 7;
     */
    defaultTopCornerImage?: AppearanceMediaAssetVM;
    /**
     * @generated from protobuf field: Mgmt.AppearanceMediaAssetVM defaultRewardsBackgroundImage = 2;
     */
    defaultRewardsBackgroundImage?: AppearanceMediaAssetVM;
    /**
     * @generated from protobuf field: Mgmt.AppearanceMediaAssetVM defaultRewardImage = 6;
     */
    defaultRewardImage?: AppearanceMediaAssetVM;
    /**
     * @generated from protobuf field: Mgmt.AppearanceMediaAssetVM defaultProfileFooterImage = 3;
     */
    defaultProfileFooterImage?: AppearanceMediaAssetVM;
    /**
     * @generated from protobuf field: Mgmt.AppearanceMediaAssetVM defaultCheckoutHeaderImage = 8;
     */
    defaultCheckoutHeaderImage?: AppearanceMediaAssetVM;
    /**
     * @generated from protobuf field: Mgmt.AppearanceMediaAssetVM defaultSignInHeaderImage = 9;
     */
    defaultSignInHeaderImage?: AppearanceMediaAssetVM;
    /**
     * @generated from protobuf field: Mgmt.AppearanceMediaAssetVM defaultLoyaltyPerksImage = 10;
     */
    defaultLoyaltyPerksImage?: AppearanceMediaAssetVM;
    /**
     * @generated from protobuf field: Mgmt.AppearanceMediaAssetVM defaultLoyaltyInstructionsImage = 11;
     */
    defaultLoyaltyInstructionsImage?: AppearanceMediaAssetVM;
}
/**
 * @generated from protobuf message Mgmt.ScreensaversVM
 */
export interface ScreensaversVM {
    /**
     * @generated from protobuf field: repeated Mgmt.AppearanceMediaAssetVM files = 1;
     */
    files: AppearanceMediaAssetVM[];
}
/**
 * @generated from protobuf message Mgmt.AppearanceMediaAssetVM
 */
export interface AppearanceMediaAssetVM {
    /**
     * @generated from protobuf field: string name = 1;
     */
    name: string;
    /**
     * @generated from protobuf field: string displayUrl = 2;
     */
    displayUrl: string;
    /**
     * @generated from protobuf field: string storagePath = 3;
     */
    storagePath: string;
}
/**
 * @generated from protobuf message Mgmt.ReceiptSettingsVM
 */
export interface ReceiptSettingsVM {
    /**
     * @generated from protobuf field: string headerText = 1;
     */
    headerText: string;
    /**
     * @generated from protobuf field: string footerText = 2;
     */
    footerText: string;
    /**
     * @generated from protobuf field: Mgmt.AppearanceMediaAssetVM logo = 3;
     */
    logo?: AppearanceMediaAssetVM;
    /**
     * @generated from protobuf field: Mgmt.AddressVM receiptAddress = 4;
     */
    receiptAddress?: AddressVM;
    /**
     * @generated from protobuf field: Mgmt.PhoneNumberVM phone = 5;
     */
    phone?: PhoneNumberVM;
    /**
     * @generated from protobuf field: bool autoPrint = 6;
     */
    autoPrint: boolean;
    /**
     * @generated from protobuf field: optional string emailFrom = 7;
     */
    emailFrom?: string;
    /**
     * @generated from protobuf field: optional string emailFromName = 8;
     */
    emailFromName?: string;
    /**
     * @generated from protobuf field: optional bool enableEmailReceipt = 9;
     */
    enableEmailReceipt?: boolean;
    /**
     * @generated from protobuf field: optional string templateId = 10;
     */
    templateId?: string;
    /**
     * @generated from protobuf field: optional bool enableSmsReceipt = 11;
     */
    enableSmsReceipt?: boolean;
    /**
     * @generated from protobuf field: optional string smsApiKey = 12;
     */
    smsApiKey?: string;
    /**
     * @generated from protobuf field: optional string smsMessageFormat = 13;
     */
    smsMessageFormat?: string;
    /**
     * @generated from protobuf field: optional string emailSubject = 14;
     */
    emailSubject?: string;
    /**
     * @generated from protobuf field: Mgmt.ReceiptVisibilityOptions receiptVisibilityOptions = 15;
     */
    receiptVisibilityOptions?: ReceiptVisibilityOptions;
}
/**
 * @generated from protobuf message Mgmt.ReceiptVisibilityOptions
 */
export interface ReceiptVisibilityOptions {
    /**
     * @generated from protobuf field: bool modifierGroupNames = 1;
     */
    modifierGroupNames: boolean;
    /**
     * @generated from protobuf field: bool defaultModifiers = 2;
     */
    defaultModifiers: boolean;
    /**
     * @generated from protobuf field: bool freeModifiers = 3;
     */
    freeModifiers: boolean;
    /**
     * @generated from protobuf field: bool pricedModifiers = 4;
     */
    pricedModifiers: boolean;
}
// @generated message type with reflection information, may provide speed optimized methods
class AppearanceVM$Type extends MessageType<AppearanceVM> {
    constructor() {
        super("Mgmt.AppearanceVM", [
            { no: 1, name: "colors", kind: "message", T: () => KioskColorsVM },
            { no: 2, name: "template", kind: "message", T: () => TemplateConfigVM },
            { no: 3, name: "receipts", kind: "message", T: () => ReceiptSettingsVM }
        ]);
    }
    create(value?: PartialMessage<AppearanceVM>): AppearanceVM {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<AppearanceVM>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AppearanceVM): AppearanceVM {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* Mgmt.KioskColorsVM colors */ 1:
                    message.colors = KioskColorsVM.internalBinaryRead(reader, reader.uint32(), options, message.colors);
                    break;
                case /* Mgmt.TemplateConfigVM template */ 2:
                    message.template = TemplateConfigVM.internalBinaryRead(reader, reader.uint32(), options, message.template);
                    break;
                case /* Mgmt.ReceiptSettingsVM receipts */ 3:
                    message.receipts = ReceiptSettingsVM.internalBinaryRead(reader, reader.uint32(), options, message.receipts);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AppearanceVM, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* Mgmt.KioskColorsVM colors = 1; */
        if (message.colors)
            KioskColorsVM.internalBinaryWrite(message.colors, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* Mgmt.TemplateConfigVM template = 2; */
        if (message.template)
            TemplateConfigVM.internalBinaryWrite(message.template, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* Mgmt.ReceiptSettingsVM receipts = 3; */
        if (message.receipts)
            ReceiptSettingsVM.internalBinaryWrite(message.receipts, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message Mgmt.AppearanceVM
 */
export const AppearanceVM = new AppearanceVM$Type();
// @generated message type with reflection information, may provide speed optimized methods
class KioskColorsVM$Type extends MessageType<KioskColorsVM> {
    constructor() {
        super("Mgmt.KioskColorsVM", [
            { no: 1, name: "primary", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "onPrimary", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "secondary", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "onSecondary", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "tertiary", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "onTertiary", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "surface", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 8, name: "onSurface", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 9, name: "background", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 10, name: "onBackground", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 11, name: "error", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 12, name: "onError", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<KioskColorsVM>): KioskColorsVM {
        const message = { primary: "", onPrimary: "", secondary: "", onSecondary: "", tertiary: "", onTertiary: "", surface: "", onSurface: "", background: "", onBackground: "", error: "", onError: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<KioskColorsVM>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: KioskColorsVM): KioskColorsVM {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string primary */ 1:
                    message.primary = reader.string();
                    break;
                case /* string onPrimary */ 2:
                    message.onPrimary = reader.string();
                    break;
                case /* string secondary */ 3:
                    message.secondary = reader.string();
                    break;
                case /* string onSecondary */ 4:
                    message.onSecondary = reader.string();
                    break;
                case /* string tertiary */ 5:
                    message.tertiary = reader.string();
                    break;
                case /* string onTertiary */ 6:
                    message.onTertiary = reader.string();
                    break;
                case /* string surface */ 7:
                    message.surface = reader.string();
                    break;
                case /* string onSurface */ 8:
                    message.onSurface = reader.string();
                    break;
                case /* string background */ 9:
                    message.background = reader.string();
                    break;
                case /* string onBackground */ 10:
                    message.onBackground = reader.string();
                    break;
                case /* string error */ 11:
                    message.error = reader.string();
                    break;
                case /* string onError */ 12:
                    message.onError = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: KioskColorsVM, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string primary = 1; */
        if (message.primary !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.primary);
        /* string onPrimary = 2; */
        if (message.onPrimary !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.onPrimary);
        /* string secondary = 3; */
        if (message.secondary !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.secondary);
        /* string onSecondary = 4; */
        if (message.onSecondary !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.onSecondary);
        /* string tertiary = 5; */
        if (message.tertiary !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.tertiary);
        /* string onTertiary = 6; */
        if (message.onTertiary !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.onTertiary);
        /* string surface = 7; */
        if (message.surface !== "")
            writer.tag(7, WireType.LengthDelimited).string(message.surface);
        /* string onSurface = 8; */
        if (message.onSurface !== "")
            writer.tag(8, WireType.LengthDelimited).string(message.onSurface);
        /* string background = 9; */
        if (message.background !== "")
            writer.tag(9, WireType.LengthDelimited).string(message.background);
        /* string onBackground = 10; */
        if (message.onBackground !== "")
            writer.tag(10, WireType.LengthDelimited).string(message.onBackground);
        /* string error = 11; */
        if (message.error !== "")
            writer.tag(11, WireType.LengthDelimited).string(message.error);
        /* string onError = 12; */
        if (message.onError !== "")
            writer.tag(12, WireType.LengthDelimited).string(message.onError);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message Mgmt.KioskColorsVM
 */
export const KioskColorsVM = new KioskColorsVM$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LoyaltyColorsVM$Type extends MessageType<LoyaltyColorsVM> {
    constructor() {
        super("Mgmt.LoyaltyColorsVM", [
            { no: 1, name: "onLoyaltyAccent", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "loyaltyAccent", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "loyalty", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "onLoyalty", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "loyaltyBackground", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<LoyaltyColorsVM>): LoyaltyColorsVM {
        const message = { onLoyaltyAccent: "", loyaltyAccent: "", loyalty: "", onLoyalty: "", loyaltyBackground: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<LoyaltyColorsVM>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LoyaltyColorsVM): LoyaltyColorsVM {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string onLoyaltyAccent */ 1:
                    message.onLoyaltyAccent = reader.string();
                    break;
                case /* string loyaltyAccent */ 2:
                    message.loyaltyAccent = reader.string();
                    break;
                case /* string loyalty */ 3:
                    message.loyalty = reader.string();
                    break;
                case /* string onLoyalty */ 4:
                    message.onLoyalty = reader.string();
                    break;
                case /* string loyaltyBackground */ 5:
                    message.loyaltyBackground = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LoyaltyColorsVM, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string onLoyaltyAccent = 1; */
        if (message.onLoyaltyAccent !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.onLoyaltyAccent);
        /* string loyaltyAccent = 2; */
        if (message.loyaltyAccent !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.loyaltyAccent);
        /* string loyalty = 3; */
        if (message.loyalty !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.loyalty);
        /* string onLoyalty = 4; */
        if (message.onLoyalty !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.onLoyalty);
        /* string loyaltyBackground = 5; */
        if (message.loyaltyBackground !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.loyaltyBackground);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message Mgmt.LoyaltyColorsVM
 */
export const LoyaltyColorsVM = new LoyaltyColorsVM$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TemplateConfigVM$Type extends MessageType<TemplateConfigVM> {
    constructor() {
        super("Mgmt.TemplateConfigVM", [
            { no: 1, name: "templateId", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "settings", kind: "message", T: () => TemplateSettingsVM },
            { no: 3, name: "screensavers", kind: "message", T: () => ScreensaversVM },
            { no: 4, name: "text", kind: "message", T: () => TemplateTextVM },
            { no: 5, name: "images", kind: "message", T: () => TemplateImagesVM },
            { no: 6, name: "animations", kind: "message", T: () => AnimationsVM }
        ]);
    }
    create(value?: PartialMessage<TemplateConfigVM>): TemplateConfigVM {
        const message = { templateId: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<TemplateConfigVM>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TemplateConfigVM): TemplateConfigVM {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string templateId */ 1:
                    message.templateId = reader.string();
                    break;
                case /* Mgmt.TemplateSettingsVM settings */ 2:
                    message.settings = TemplateSettingsVM.internalBinaryRead(reader, reader.uint32(), options, message.settings);
                    break;
                case /* Mgmt.ScreensaversVM screensavers */ 3:
                    message.screensavers = ScreensaversVM.internalBinaryRead(reader, reader.uint32(), options, message.screensavers);
                    break;
                case /* Mgmt.TemplateTextVM text */ 4:
                    message.text = TemplateTextVM.internalBinaryRead(reader, reader.uint32(), options, message.text);
                    break;
                case /* Mgmt.TemplateImagesVM images */ 5:
                    message.images = TemplateImagesVM.internalBinaryRead(reader, reader.uint32(), options, message.images);
                    break;
                case /* Mgmt.AnimationsVM animations */ 6:
                    message.animations = AnimationsVM.internalBinaryRead(reader, reader.uint32(), options, message.animations);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TemplateConfigVM, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string templateId = 1; */
        if (message.templateId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.templateId);
        /* Mgmt.TemplateSettingsVM settings = 2; */
        if (message.settings)
            TemplateSettingsVM.internalBinaryWrite(message.settings, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* Mgmt.ScreensaversVM screensavers = 3; */
        if (message.screensavers)
            ScreensaversVM.internalBinaryWrite(message.screensavers, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* Mgmt.TemplateTextVM text = 4; */
        if (message.text)
            TemplateTextVM.internalBinaryWrite(message.text, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* Mgmt.TemplateImagesVM images = 5; */
        if (message.images)
            TemplateImagesVM.internalBinaryWrite(message.images, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* Mgmt.AnimationsVM animations = 6; */
        if (message.animations)
            AnimationsVM.internalBinaryWrite(message.animations, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message Mgmt.TemplateConfigVM
 */
export const TemplateConfigVM = new TemplateConfigVM$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TemplateSettingsVM$Type extends MessageType<TemplateSettingsVM> {
    constructor() {
        super("Mgmt.TemplateSettingsVM", [
            { no: 1, name: "options", kind: "map", K: 9 /*ScalarType.STRING*/, V: { kind: "scalar", T: 9 /*ScalarType.STRING*/ } }
        ]);
    }
    create(value?: PartialMessage<TemplateSettingsVM>): TemplateSettingsVM {
        const message = { options: {} };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<TemplateSettingsVM>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TemplateSettingsVM): TemplateSettingsVM {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* map<string, string> options */ 1:
                    this.binaryReadMap1(message.options, reader, options);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    private binaryReadMap1(map: TemplateSettingsVM["options"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof TemplateSettingsVM["options"] | undefined, val: TemplateSettingsVM["options"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.string();
                    break;
                case 2:
                    val = reader.string();
                    break;
                default: throw new globalThis.Error("unknown map entry field for field Mgmt.TemplateSettingsVM.options");
            }
        }
        map[key ?? ""] = val ?? "";
    }
    internalBinaryWrite(message: TemplateSettingsVM, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* map<string, string> options = 1; */
        for (let k of Object.keys(message.options))
            writer.tag(1, WireType.LengthDelimited).fork().tag(1, WireType.LengthDelimited).string(k).tag(2, WireType.LengthDelimited).string(message.options[k]).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message Mgmt.TemplateSettingsVM
 */
export const TemplateSettingsVM = new TemplateSettingsVM$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TemplateTextVM$Type extends MessageType<TemplateTextVM> {
    constructor() {
        super("Mgmt.TemplateTextVM", [
            { no: 1, name: "default", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => TemplateLanguageTextVM },
            { no: 2, name: "overrides", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => TemplateLanguageTextVM }
        ]);
    }
    create(value?: PartialMessage<TemplateTextVM>): TemplateTextVM {
        const message = { default: [], overrides: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<TemplateTextVM>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TemplateTextVM): TemplateTextVM {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated Mgmt.TemplateLanguageTextVM default */ 1:
                    message.default.push(TemplateLanguageTextVM.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated Mgmt.TemplateLanguageTextVM overrides */ 2:
                    message.overrides.push(TemplateLanguageTextVM.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TemplateTextVM, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated Mgmt.TemplateLanguageTextVM default = 1; */
        for (let i = 0; i < message.default.length; i++)
            TemplateLanguageTextVM.internalBinaryWrite(message.default[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* repeated Mgmt.TemplateLanguageTextVM overrides = 2; */
        for (let i = 0; i < message.overrides.length; i++)
            TemplateLanguageTextVM.internalBinaryWrite(message.overrides[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message Mgmt.TemplateTextVM
 */
export const TemplateTextVM = new TemplateTextVM$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TemplateLanguageTextVM$Type extends MessageType<TemplateLanguageTextVM> {
    constructor() {
        super("Mgmt.TemplateLanguageTextVM", [
            { no: 1, name: "languageCode", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "strings", kind: "map", K: 9 /*ScalarType.STRING*/, V: { kind: "scalar", T: 9 /*ScalarType.STRING*/ } }
        ]);
    }
    create(value?: PartialMessage<TemplateLanguageTextVM>): TemplateLanguageTextVM {
        const message = { languageCode: "", strings: {} };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<TemplateLanguageTextVM>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TemplateLanguageTextVM): TemplateLanguageTextVM {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string languageCode */ 1:
                    message.languageCode = reader.string();
                    break;
                case /* map<string, string> strings */ 2:
                    this.binaryReadMap2(message.strings, reader, options);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    private binaryReadMap2(map: TemplateLanguageTextVM["strings"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof TemplateLanguageTextVM["strings"] | undefined, val: TemplateLanguageTextVM["strings"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.string();
                    break;
                case 2:
                    val = reader.string();
                    break;
                default: throw new globalThis.Error("unknown map entry field for field Mgmt.TemplateLanguageTextVM.strings");
            }
        }
        map[key ?? ""] = val ?? "";
    }
    internalBinaryWrite(message: TemplateLanguageTextVM, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string languageCode = 1; */
        if (message.languageCode !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.languageCode);
        /* map<string, string> strings = 2; */
        for (let k of Object.keys(message.strings))
            writer.tag(2, WireType.LengthDelimited).fork().tag(1, WireType.LengthDelimited).string(k).tag(2, WireType.LengthDelimited).string(message.strings[k]).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message Mgmt.TemplateLanguageTextVM
 */
export const TemplateLanguageTextVM = new TemplateLanguageTextVM$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TemplateImagesVM$Type extends MessageType<TemplateImagesVM> {
    constructor() {
        super("Mgmt.TemplateImagesVM", [
            { no: 1, name: "defaultCategoryHeaderImage", kind: "message", T: () => AppearanceMediaAssetVM },
            { no: 2, name: "defaultLoyaltyRewardImage", kind: "message", T: () => AppearanceMediaAssetVM },
            { no: 3, name: "defaultLoyaltyMedia", kind: "message", T: () => LoyaltyMediaVM }
        ]);
    }
    create(value?: PartialMessage<TemplateImagesVM>): TemplateImagesVM {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<TemplateImagesVM>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TemplateImagesVM): TemplateImagesVM {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* Mgmt.AppearanceMediaAssetVM defaultCategoryHeaderImage */ 1:
                    message.defaultCategoryHeaderImage = AppearanceMediaAssetVM.internalBinaryRead(reader, reader.uint32(), options, message.defaultCategoryHeaderImage);
                    break;
                case /* Mgmt.AppearanceMediaAssetVM defaultLoyaltyRewardImage = 2 [deprecated = true];*/ 2:
                    message.defaultLoyaltyRewardImage = AppearanceMediaAssetVM.internalBinaryRead(reader, reader.uint32(), options, message.defaultLoyaltyRewardImage);
                    break;
                case /* Mgmt.LoyaltyMediaVM defaultLoyaltyMedia */ 3:
                    message.defaultLoyaltyMedia = LoyaltyMediaVM.internalBinaryRead(reader, reader.uint32(), options, message.defaultLoyaltyMedia);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TemplateImagesVM, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* Mgmt.AppearanceMediaAssetVM defaultCategoryHeaderImage = 1; */
        if (message.defaultCategoryHeaderImage)
            AppearanceMediaAssetVM.internalBinaryWrite(message.defaultCategoryHeaderImage, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* Mgmt.AppearanceMediaAssetVM defaultLoyaltyRewardImage = 2 [deprecated = true]; */
        if (message.defaultLoyaltyRewardImage)
            AppearanceMediaAssetVM.internalBinaryWrite(message.defaultLoyaltyRewardImage, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* Mgmt.LoyaltyMediaVM defaultLoyaltyMedia = 3; */
        if (message.defaultLoyaltyMedia)
            LoyaltyMediaVM.internalBinaryWrite(message.defaultLoyaltyMedia, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message Mgmt.TemplateImagesVM
 */
export const TemplateImagesVM = new TemplateImagesVM$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AnimationsVM$Type extends MessageType<AnimationsVM> {
    constructor() {
        super("Mgmt.AnimationsVM", [
            { no: 1, name: "loading", kind: "message", T: () => AppearanceMediaAssetVM },
            { no: 2, name: "orderTimeout", kind: "message", T: () => AppearanceMediaAssetVM },
            { no: 3, name: "scanQRCode", kind: "message", T: () => AppearanceMediaAssetVM },
            { no: 4, name: "calculatingOrder", kind: "message", T: () => AppearanceMediaAssetVM },
            { no: 5, name: "payWithCard", kind: "message", T: () => AppearanceMediaAssetVM },
            { no: 6, name: "paymentSuccess", kind: "message", T: () => AppearanceMediaAssetVM },
            { no: 7, name: "paymentFail", kind: "message", T: () => AppearanceMediaAssetVM },
            { no: 8, name: "storeIsClosed", kind: "message", T: () => AppearanceMediaAssetVM }
        ]);
    }
    create(value?: PartialMessage<AnimationsVM>): AnimationsVM {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<AnimationsVM>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AnimationsVM): AnimationsVM {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* Mgmt.AppearanceMediaAssetVM loading */ 1:
                    message.loading = AppearanceMediaAssetVM.internalBinaryRead(reader, reader.uint32(), options, message.loading);
                    break;
                case /* Mgmt.AppearanceMediaAssetVM orderTimeout */ 2:
                    message.orderTimeout = AppearanceMediaAssetVM.internalBinaryRead(reader, reader.uint32(), options, message.orderTimeout);
                    break;
                case /* Mgmt.AppearanceMediaAssetVM scanQRCode */ 3:
                    message.scanQRCode = AppearanceMediaAssetVM.internalBinaryRead(reader, reader.uint32(), options, message.scanQRCode);
                    break;
                case /* Mgmt.AppearanceMediaAssetVM calculatingOrder */ 4:
                    message.calculatingOrder = AppearanceMediaAssetVM.internalBinaryRead(reader, reader.uint32(), options, message.calculatingOrder);
                    break;
                case /* Mgmt.AppearanceMediaAssetVM payWithCard */ 5:
                    message.payWithCard = AppearanceMediaAssetVM.internalBinaryRead(reader, reader.uint32(), options, message.payWithCard);
                    break;
                case /* Mgmt.AppearanceMediaAssetVM paymentSuccess */ 6:
                    message.paymentSuccess = AppearanceMediaAssetVM.internalBinaryRead(reader, reader.uint32(), options, message.paymentSuccess);
                    break;
                case /* Mgmt.AppearanceMediaAssetVM paymentFail */ 7:
                    message.paymentFail = AppearanceMediaAssetVM.internalBinaryRead(reader, reader.uint32(), options, message.paymentFail);
                    break;
                case /* Mgmt.AppearanceMediaAssetVM storeIsClosed */ 8:
                    message.storeIsClosed = AppearanceMediaAssetVM.internalBinaryRead(reader, reader.uint32(), options, message.storeIsClosed);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AnimationsVM, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* Mgmt.AppearanceMediaAssetVM loading = 1; */
        if (message.loading)
            AppearanceMediaAssetVM.internalBinaryWrite(message.loading, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* Mgmt.AppearanceMediaAssetVM orderTimeout = 2; */
        if (message.orderTimeout)
            AppearanceMediaAssetVM.internalBinaryWrite(message.orderTimeout, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* Mgmt.AppearanceMediaAssetVM scanQRCode = 3; */
        if (message.scanQRCode)
            AppearanceMediaAssetVM.internalBinaryWrite(message.scanQRCode, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* Mgmt.AppearanceMediaAssetVM calculatingOrder = 4; */
        if (message.calculatingOrder)
            AppearanceMediaAssetVM.internalBinaryWrite(message.calculatingOrder, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* Mgmt.AppearanceMediaAssetVM payWithCard = 5; */
        if (message.payWithCard)
            AppearanceMediaAssetVM.internalBinaryWrite(message.payWithCard, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* Mgmt.AppearanceMediaAssetVM paymentSuccess = 6; */
        if (message.paymentSuccess)
            AppearanceMediaAssetVM.internalBinaryWrite(message.paymentSuccess, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        /* Mgmt.AppearanceMediaAssetVM paymentFail = 7; */
        if (message.paymentFail)
            AppearanceMediaAssetVM.internalBinaryWrite(message.paymentFail, writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        /* Mgmt.AppearanceMediaAssetVM storeIsClosed = 8; */
        if (message.storeIsClosed)
            AppearanceMediaAssetVM.internalBinaryWrite(message.storeIsClosed, writer.tag(8, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message Mgmt.AnimationsVM
 */
export const AnimationsVM = new AnimationsVM$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LoyaltyMediaVM$Type extends MessageType<LoyaltyMediaVM> {
    constructor() {
        super("Mgmt.LoyaltyMediaVM", [
            { no: 1, name: "defaultProfileHeaderImage", kind: "message", T: () => AppearanceMediaAssetVM },
            { no: 7, name: "defaultTopCornerImage", kind: "message", T: () => AppearanceMediaAssetVM },
            { no: 2, name: "defaultRewardsBackgroundImage", kind: "message", T: () => AppearanceMediaAssetVM },
            { no: 6, name: "defaultRewardImage", kind: "message", T: () => AppearanceMediaAssetVM },
            { no: 3, name: "defaultProfileFooterImage", kind: "message", T: () => AppearanceMediaAssetVM },
            { no: 8, name: "defaultCheckoutHeaderImage", kind: "message", T: () => AppearanceMediaAssetVM },
            { no: 9, name: "defaultSignInHeaderImage", kind: "message", T: () => AppearanceMediaAssetVM },
            { no: 10, name: "defaultLoyaltyPerksImage", kind: "message", T: () => AppearanceMediaAssetVM },
            { no: 11, name: "defaultLoyaltyInstructionsImage", kind: "message", T: () => AppearanceMediaAssetVM }
        ]);
    }
    create(value?: PartialMessage<LoyaltyMediaVM>): LoyaltyMediaVM {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<LoyaltyMediaVM>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LoyaltyMediaVM): LoyaltyMediaVM {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* Mgmt.AppearanceMediaAssetVM defaultProfileHeaderImage */ 1:
                    message.defaultProfileHeaderImage = AppearanceMediaAssetVM.internalBinaryRead(reader, reader.uint32(), options, message.defaultProfileHeaderImage);
                    break;
                case /* Mgmt.AppearanceMediaAssetVM defaultTopCornerImage */ 7:
                    message.defaultTopCornerImage = AppearanceMediaAssetVM.internalBinaryRead(reader, reader.uint32(), options, message.defaultTopCornerImage);
                    break;
                case /* Mgmt.AppearanceMediaAssetVM defaultRewardsBackgroundImage */ 2:
                    message.defaultRewardsBackgroundImage = AppearanceMediaAssetVM.internalBinaryRead(reader, reader.uint32(), options, message.defaultRewardsBackgroundImage);
                    break;
                case /* Mgmt.AppearanceMediaAssetVM defaultRewardImage */ 6:
                    message.defaultRewardImage = AppearanceMediaAssetVM.internalBinaryRead(reader, reader.uint32(), options, message.defaultRewardImage);
                    break;
                case /* Mgmt.AppearanceMediaAssetVM defaultProfileFooterImage */ 3:
                    message.defaultProfileFooterImage = AppearanceMediaAssetVM.internalBinaryRead(reader, reader.uint32(), options, message.defaultProfileFooterImage);
                    break;
                case /* Mgmt.AppearanceMediaAssetVM defaultCheckoutHeaderImage */ 8:
                    message.defaultCheckoutHeaderImage = AppearanceMediaAssetVM.internalBinaryRead(reader, reader.uint32(), options, message.defaultCheckoutHeaderImage);
                    break;
                case /* Mgmt.AppearanceMediaAssetVM defaultSignInHeaderImage */ 9:
                    message.defaultSignInHeaderImage = AppearanceMediaAssetVM.internalBinaryRead(reader, reader.uint32(), options, message.defaultSignInHeaderImage);
                    break;
                case /* Mgmt.AppearanceMediaAssetVM defaultLoyaltyPerksImage */ 10:
                    message.defaultLoyaltyPerksImage = AppearanceMediaAssetVM.internalBinaryRead(reader, reader.uint32(), options, message.defaultLoyaltyPerksImage);
                    break;
                case /* Mgmt.AppearanceMediaAssetVM defaultLoyaltyInstructionsImage */ 11:
                    message.defaultLoyaltyInstructionsImage = AppearanceMediaAssetVM.internalBinaryRead(reader, reader.uint32(), options, message.defaultLoyaltyInstructionsImage);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LoyaltyMediaVM, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* Mgmt.AppearanceMediaAssetVM defaultProfileHeaderImage = 1; */
        if (message.defaultProfileHeaderImage)
            AppearanceMediaAssetVM.internalBinaryWrite(message.defaultProfileHeaderImage, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* Mgmt.AppearanceMediaAssetVM defaultTopCornerImage = 7; */
        if (message.defaultTopCornerImage)
            AppearanceMediaAssetVM.internalBinaryWrite(message.defaultTopCornerImage, writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        /* Mgmt.AppearanceMediaAssetVM defaultRewardsBackgroundImage = 2; */
        if (message.defaultRewardsBackgroundImage)
            AppearanceMediaAssetVM.internalBinaryWrite(message.defaultRewardsBackgroundImage, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* Mgmt.AppearanceMediaAssetVM defaultRewardImage = 6; */
        if (message.defaultRewardImage)
            AppearanceMediaAssetVM.internalBinaryWrite(message.defaultRewardImage, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        /* Mgmt.AppearanceMediaAssetVM defaultProfileFooterImage = 3; */
        if (message.defaultProfileFooterImage)
            AppearanceMediaAssetVM.internalBinaryWrite(message.defaultProfileFooterImage, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* Mgmt.AppearanceMediaAssetVM defaultCheckoutHeaderImage = 8; */
        if (message.defaultCheckoutHeaderImage)
            AppearanceMediaAssetVM.internalBinaryWrite(message.defaultCheckoutHeaderImage, writer.tag(8, WireType.LengthDelimited).fork(), options).join();
        /* Mgmt.AppearanceMediaAssetVM defaultSignInHeaderImage = 9; */
        if (message.defaultSignInHeaderImage)
            AppearanceMediaAssetVM.internalBinaryWrite(message.defaultSignInHeaderImage, writer.tag(9, WireType.LengthDelimited).fork(), options).join();
        /* Mgmt.AppearanceMediaAssetVM defaultLoyaltyPerksImage = 10; */
        if (message.defaultLoyaltyPerksImage)
            AppearanceMediaAssetVM.internalBinaryWrite(message.defaultLoyaltyPerksImage, writer.tag(10, WireType.LengthDelimited).fork(), options).join();
        /* Mgmt.AppearanceMediaAssetVM defaultLoyaltyInstructionsImage = 11; */
        if (message.defaultLoyaltyInstructionsImage)
            AppearanceMediaAssetVM.internalBinaryWrite(message.defaultLoyaltyInstructionsImage, writer.tag(11, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message Mgmt.LoyaltyMediaVM
 */
export const LoyaltyMediaVM = new LoyaltyMediaVM$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ScreensaversVM$Type extends MessageType<ScreensaversVM> {
    constructor() {
        super("Mgmt.ScreensaversVM", [
            { no: 1, name: "files", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => AppearanceMediaAssetVM }
        ]);
    }
    create(value?: PartialMessage<ScreensaversVM>): ScreensaversVM {
        const message = { files: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ScreensaversVM>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ScreensaversVM): ScreensaversVM {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated Mgmt.AppearanceMediaAssetVM files */ 1:
                    message.files.push(AppearanceMediaAssetVM.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ScreensaversVM, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated Mgmt.AppearanceMediaAssetVM files = 1; */
        for (let i = 0; i < message.files.length; i++)
            AppearanceMediaAssetVM.internalBinaryWrite(message.files[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message Mgmt.ScreensaversVM
 */
export const ScreensaversVM = new ScreensaversVM$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AppearanceMediaAssetVM$Type extends MessageType<AppearanceMediaAssetVM> {
    constructor() {
        super("Mgmt.AppearanceMediaAssetVM", [
            { no: 1, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "displayUrl", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "storagePath", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<AppearanceMediaAssetVM>): AppearanceMediaAssetVM {
        const message = { name: "", displayUrl: "", storagePath: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<AppearanceMediaAssetVM>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AppearanceMediaAssetVM): AppearanceMediaAssetVM {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string name */ 1:
                    message.name = reader.string();
                    break;
                case /* string displayUrl */ 2:
                    message.displayUrl = reader.string();
                    break;
                case /* string storagePath */ 3:
                    message.storagePath = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AppearanceMediaAssetVM, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string name = 1; */
        if (message.name !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.name);
        /* string displayUrl = 2; */
        if (message.displayUrl !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.displayUrl);
        /* string storagePath = 3; */
        if (message.storagePath !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.storagePath);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message Mgmt.AppearanceMediaAssetVM
 */
export const AppearanceMediaAssetVM = new AppearanceMediaAssetVM$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ReceiptSettingsVM$Type extends MessageType<ReceiptSettingsVM> {
    constructor() {
        super("Mgmt.ReceiptSettingsVM", [
            { no: 1, name: "headerText", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "footerText", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "logo", kind: "message", T: () => AppearanceMediaAssetVM },
            { no: 4, name: "receiptAddress", kind: "message", T: () => AddressVM },
            { no: 5, name: "phone", kind: "message", T: () => PhoneNumberVM },
            { no: 6, name: "autoPrint", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 7, name: "emailFrom", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 8, name: "emailFromName", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 9, name: "enableEmailReceipt", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 10, name: "templateId", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 11, name: "enableSmsReceipt", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 12, name: "smsApiKey", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 13, name: "smsMessageFormat", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 14, name: "emailSubject", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 15, name: "receiptVisibilityOptions", kind: "message", T: () => ReceiptVisibilityOptions }
        ]);
    }
    create(value?: PartialMessage<ReceiptSettingsVM>): ReceiptSettingsVM {
        const message = { headerText: "", footerText: "", autoPrint: false };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ReceiptSettingsVM>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ReceiptSettingsVM): ReceiptSettingsVM {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string headerText */ 1:
                    message.headerText = reader.string();
                    break;
                case /* string footerText */ 2:
                    message.footerText = reader.string();
                    break;
                case /* Mgmt.AppearanceMediaAssetVM logo */ 3:
                    message.logo = AppearanceMediaAssetVM.internalBinaryRead(reader, reader.uint32(), options, message.logo);
                    break;
                case /* Mgmt.AddressVM receiptAddress */ 4:
                    message.receiptAddress = AddressVM.internalBinaryRead(reader, reader.uint32(), options, message.receiptAddress);
                    break;
                case /* Mgmt.PhoneNumberVM phone */ 5:
                    message.phone = PhoneNumberVM.internalBinaryRead(reader, reader.uint32(), options, message.phone);
                    break;
                case /* bool autoPrint */ 6:
                    message.autoPrint = reader.bool();
                    break;
                case /* optional string emailFrom */ 7:
                    message.emailFrom = reader.string();
                    break;
                case /* optional string emailFromName */ 8:
                    message.emailFromName = reader.string();
                    break;
                case /* optional bool enableEmailReceipt */ 9:
                    message.enableEmailReceipt = reader.bool();
                    break;
                case /* optional string templateId */ 10:
                    message.templateId = reader.string();
                    break;
                case /* optional bool enableSmsReceipt */ 11:
                    message.enableSmsReceipt = reader.bool();
                    break;
                case /* optional string smsApiKey */ 12:
                    message.smsApiKey = reader.string();
                    break;
                case /* optional string smsMessageFormat */ 13:
                    message.smsMessageFormat = reader.string();
                    break;
                case /* optional string emailSubject */ 14:
                    message.emailSubject = reader.string();
                    break;
                case /* Mgmt.ReceiptVisibilityOptions receiptVisibilityOptions */ 15:
                    message.receiptVisibilityOptions = ReceiptVisibilityOptions.internalBinaryRead(reader, reader.uint32(), options, message.receiptVisibilityOptions);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ReceiptSettingsVM, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string headerText = 1; */
        if (message.headerText !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.headerText);
        /* string footerText = 2; */
        if (message.footerText !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.footerText);
        /* Mgmt.AppearanceMediaAssetVM logo = 3; */
        if (message.logo)
            AppearanceMediaAssetVM.internalBinaryWrite(message.logo, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* Mgmt.AddressVM receiptAddress = 4; */
        if (message.receiptAddress)
            AddressVM.internalBinaryWrite(message.receiptAddress, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* Mgmt.PhoneNumberVM phone = 5; */
        if (message.phone)
            PhoneNumberVM.internalBinaryWrite(message.phone, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* bool autoPrint = 6; */
        if (message.autoPrint !== false)
            writer.tag(6, WireType.Varint).bool(message.autoPrint);
        /* optional string emailFrom = 7; */
        if (message.emailFrom !== undefined)
            writer.tag(7, WireType.LengthDelimited).string(message.emailFrom);
        /* optional string emailFromName = 8; */
        if (message.emailFromName !== undefined)
            writer.tag(8, WireType.LengthDelimited).string(message.emailFromName);
        /* optional bool enableEmailReceipt = 9; */
        if (message.enableEmailReceipt !== undefined)
            writer.tag(9, WireType.Varint).bool(message.enableEmailReceipt);
        /* optional string templateId = 10; */
        if (message.templateId !== undefined)
            writer.tag(10, WireType.LengthDelimited).string(message.templateId);
        /* optional bool enableSmsReceipt = 11; */
        if (message.enableSmsReceipt !== undefined)
            writer.tag(11, WireType.Varint).bool(message.enableSmsReceipt);
        /* optional string smsApiKey = 12; */
        if (message.smsApiKey !== undefined)
            writer.tag(12, WireType.LengthDelimited).string(message.smsApiKey);
        /* optional string smsMessageFormat = 13; */
        if (message.smsMessageFormat !== undefined)
            writer.tag(13, WireType.LengthDelimited).string(message.smsMessageFormat);
        /* optional string emailSubject = 14; */
        if (message.emailSubject !== undefined)
            writer.tag(14, WireType.LengthDelimited).string(message.emailSubject);
        /* Mgmt.ReceiptVisibilityOptions receiptVisibilityOptions = 15; */
        if (message.receiptVisibilityOptions)
            ReceiptVisibilityOptions.internalBinaryWrite(message.receiptVisibilityOptions, writer.tag(15, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message Mgmt.ReceiptSettingsVM
 */
export const ReceiptSettingsVM = new ReceiptSettingsVM$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ReceiptVisibilityOptions$Type extends MessageType<ReceiptVisibilityOptions> {
    constructor() {
        super("Mgmt.ReceiptVisibilityOptions", [
            { no: 1, name: "modifierGroupNames", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 2, name: "defaultModifiers", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 3, name: "freeModifiers", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 4, name: "pricedModifiers", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<ReceiptVisibilityOptions>): ReceiptVisibilityOptions {
        const message = { modifierGroupNames: false, defaultModifiers: false, freeModifiers: false, pricedModifiers: false };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ReceiptVisibilityOptions>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ReceiptVisibilityOptions): ReceiptVisibilityOptions {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool modifierGroupNames */ 1:
                    message.modifierGroupNames = reader.bool();
                    break;
                case /* bool defaultModifiers */ 2:
                    message.defaultModifiers = reader.bool();
                    break;
                case /* bool freeModifiers */ 3:
                    message.freeModifiers = reader.bool();
                    break;
                case /* bool pricedModifiers */ 4:
                    message.pricedModifiers = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ReceiptVisibilityOptions, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bool modifierGroupNames = 1; */
        if (message.modifierGroupNames !== false)
            writer.tag(1, WireType.Varint).bool(message.modifierGroupNames);
        /* bool defaultModifiers = 2; */
        if (message.defaultModifiers !== false)
            writer.tag(2, WireType.Varint).bool(message.defaultModifiers);
        /* bool freeModifiers = 3; */
        if (message.freeModifiers !== false)
            writer.tag(3, WireType.Varint).bool(message.freeModifiers);
        /* bool pricedModifiers = 4; */
        if (message.pricedModifiers !== false)
            writer.tag(4, WireType.Varint).bool(message.pricedModifiers);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message Mgmt.ReceiptVisibilityOptions
 */
export const ReceiptVisibilityOptions = new ReceiptVisibilityOptions$Type();
