/* eslint-disable */
// @generated by protobuf-ts 2.9.0 with parameter ts_nocheck,eslint_disable,add_pb_suffix,long_type_string,generate_dependencies
// @generated from protobuf file "kiosksService.proto" (package "Mgmt", syntax proto3)
// tslint:disable
// @ts-nocheck
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { KiosksService } from "./kiosksService_pb";
import type { UpdateRequest } from "./kiosksService_pb";
import type { EmptyResponse } from "./common_pb";
import type { KioskVM } from "./kiosks_pb";
import type { AddKioskRequest } from "./kiosksService_pb";
import type { KioskLinkResponse } from "./kiosksService_pb";
import type { KioskLocationRequest } from "./kiosksService_pb";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { KiosksVM } from "./kiosks_pb";
import type { LocationRequest } from "./common_pb";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * @generated from protobuf service Mgmt.KiosksService
 */
export interface IKiosksServiceClient {
    /**
     * @generated from protobuf rpc: GetKiosks(Mgmt.LocationRequest) returns (Mgmt.KiosksVM);
     */
    getKiosks(input: LocationRequest, options?: RpcOptions): UnaryCall<LocationRequest, KiosksVM>;
    /**
     * @generated from protobuf rpc: GetKioskQRCode(Mgmt.KioskLocationRequest) returns (Mgmt.KioskLinkResponse);
     */
    getKioskQRCode(input: KioskLocationRequest, options?: RpcOptions): UnaryCall<KioskLocationRequest, KioskLinkResponse>;
    /**
     * @generated from protobuf rpc: AddKiosk(Mgmt.AddKioskRequest) returns (Mgmt.KioskVM);
     */
    addKiosk(input: AddKioskRequest, options?: RpcOptions): UnaryCall<AddKioskRequest, KioskVM>;
    /**
     * linking happens in kioskService
     *
     * @generated from protobuf rpc: UnlinkKiosk(Mgmt.KioskLocationRequest) returns (Mgmt.EmptyResponse);
     */
    unlinkKiosk(input: KioskLocationRequest, options?: RpcOptions): UnaryCall<KioskLocationRequest, EmptyResponse>;
    /**
     * @generated from protobuf rpc: UpdateKiosk(Mgmt.UpdateRequest) returns (Mgmt.KioskVM);
     */
    updateKiosk(input: UpdateRequest, options?: RpcOptions): UnaryCall<UpdateRequest, KioskVM>;
    /**
     * @generated from protobuf rpc: RemoveKiosk(Mgmt.KioskLocationRequest) returns (Mgmt.EmptyResponse);
     */
    removeKiosk(input: KioskLocationRequest, options?: RpcOptions): UnaryCall<KioskLocationRequest, EmptyResponse>;
    /**
     * @generated from protobuf rpc: RemoteSync(Mgmt.LocationRequest) returns (Mgmt.EmptyResponse);
     */
    remoteSync(input: LocationRequest, options?: RpcOptions): UnaryCall<LocationRequest, EmptyResponse>;
}
/**
 * @generated from protobuf service Mgmt.KiosksService
 */
export class KiosksServiceClient implements IKiosksServiceClient, ServiceInfo {
    typeName = KiosksService.typeName;
    methods = KiosksService.methods;
    options = KiosksService.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @generated from protobuf rpc: GetKiosks(Mgmt.LocationRequest) returns (Mgmt.KiosksVM);
     */
    getKiosks(input: LocationRequest, options?: RpcOptions): UnaryCall<LocationRequest, KiosksVM> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<LocationRequest, KiosksVM>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: GetKioskQRCode(Mgmt.KioskLocationRequest) returns (Mgmt.KioskLinkResponse);
     */
    getKioskQRCode(input: KioskLocationRequest, options?: RpcOptions): UnaryCall<KioskLocationRequest, KioskLinkResponse> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<KioskLocationRequest, KioskLinkResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: AddKiosk(Mgmt.AddKioskRequest) returns (Mgmt.KioskVM);
     */
    addKiosk(input: AddKioskRequest, options?: RpcOptions): UnaryCall<AddKioskRequest, KioskVM> {
        const method = this.methods[2], opt = this._transport.mergeOptions(options);
        return stackIntercept<AddKioskRequest, KioskVM>("unary", this._transport, method, opt, input);
    }
    /**
     * linking happens in kioskService
     *
     * @generated from protobuf rpc: UnlinkKiosk(Mgmt.KioskLocationRequest) returns (Mgmt.EmptyResponse);
     */
    unlinkKiosk(input: KioskLocationRequest, options?: RpcOptions): UnaryCall<KioskLocationRequest, EmptyResponse> {
        const method = this.methods[3], opt = this._transport.mergeOptions(options);
        return stackIntercept<KioskLocationRequest, EmptyResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: UpdateKiosk(Mgmt.UpdateRequest) returns (Mgmt.KioskVM);
     */
    updateKiosk(input: UpdateRequest, options?: RpcOptions): UnaryCall<UpdateRequest, KioskVM> {
        const method = this.methods[4], opt = this._transport.mergeOptions(options);
        return stackIntercept<UpdateRequest, KioskVM>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: RemoveKiosk(Mgmt.KioskLocationRequest) returns (Mgmt.EmptyResponse);
     */
    removeKiosk(input: KioskLocationRequest, options?: RpcOptions): UnaryCall<KioskLocationRequest, EmptyResponse> {
        const method = this.methods[5], opt = this._transport.mergeOptions(options);
        return stackIntercept<KioskLocationRequest, EmptyResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: RemoteSync(Mgmt.LocationRequest) returns (Mgmt.EmptyResponse);
     */
    remoteSync(input: LocationRequest, options?: RpcOptions): UnaryCall<LocationRequest, EmptyResponse> {
        const method = this.methods[6], opt = this._transport.mergeOptions(options);
        return stackIntercept<LocationRequest, EmptyResponse>("unary", this._transport, method, opt, input);
    }
}
