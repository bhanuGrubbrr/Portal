/* eslint-disable */
// @generated by protobuf-ts 2.9.0 with parameter ts_nocheck,eslint_disable,add_pb_suffix,long_type_string,generate_dependencies
// @generated from protobuf file "orderProgressBoardService.proto" (package "Mgmt", syntax proto3)
// tslint:disable
// @ts-nocheck
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { OrderProgressBoardService } from "./orderProgressBoardService_pb";
import type { UpdateOrderProgressBoardDeviceRequest } from "./orderProgressBoardService_pb";
import type { EmptyResponse } from "./common_pb";
import type { OrderProgressBoardVM } from "./orderProgressBoard_pb";
import type { AddOrderProgressBoardRequest } from "./orderProgressBoardService_pb";
import type { DeviceLocationResponse } from "./common_pb";
import type { DeviceLocationRequest } from "./common_pb";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { OrderProgressBoardsVM } from "./orderProgressBoard_pb";
import type { LocationRequest } from "./common_pb";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * @generated from protobuf service Mgmt.OrderProgressBoardService
 */
export interface IOrderProgressBoardServiceClient {
    /**
     * @generated from protobuf rpc: GetOrderProgressBoards(Mgmt.LocationRequest) returns (Mgmt.OrderProgressBoardsVM);
     */
    getOrderProgressBoards(input: LocationRequest, options?: RpcOptions): UnaryCall<LocationRequest, OrderProgressBoardsVM>;
    /**
     * @generated from protobuf rpc: GetOrderProgressBoardOTP(Mgmt.DeviceLocationRequest) returns (Mgmt.DeviceLocationResponse);
     */
    getOrderProgressBoardOTP(input: DeviceLocationRequest, options?: RpcOptions): UnaryCall<DeviceLocationRequest, DeviceLocationResponse>;
    /**
     * @generated from protobuf rpc: AddOrderProgressBoard(Mgmt.AddOrderProgressBoardRequest) returns (Mgmt.OrderProgressBoardVM);
     */
    addOrderProgressBoard(input: AddOrderProgressBoardRequest, options?: RpcOptions): UnaryCall<AddOrderProgressBoardRequest, OrderProgressBoardVM>;
    /**
     * linking happens in kioskService
     *
     * @generated from protobuf rpc: UnlinkOrderProgressBoard(Mgmt.DeviceLocationRequest) returns (Mgmt.EmptyResponse);
     */
    unlinkOrderProgressBoard(input: DeviceLocationRequest, options?: RpcOptions): UnaryCall<DeviceLocationRequest, EmptyResponse>;
    /**
     * @generated from protobuf rpc: UpdateOrderProgressBoard(Mgmt.UpdateOrderProgressBoardDeviceRequest) returns (Mgmt.OrderProgressBoardVM);
     */
    updateOrderProgressBoard(input: UpdateOrderProgressBoardDeviceRequest, options?: RpcOptions): UnaryCall<UpdateOrderProgressBoardDeviceRequest, OrderProgressBoardVM>;
    /**
     * @generated from protobuf rpc: RemoveOrderProgressBoard(Mgmt.DeviceLocationRequest) returns (Mgmt.EmptyResponse);
     */
    removeOrderProgressBoard(input: DeviceLocationRequest, options?: RpcOptions): UnaryCall<DeviceLocationRequest, EmptyResponse>;
}
/**
 * @generated from protobuf service Mgmt.OrderProgressBoardService
 */
export class OrderProgressBoardServiceClient implements IOrderProgressBoardServiceClient, ServiceInfo {
    typeName = OrderProgressBoardService.typeName;
    methods = OrderProgressBoardService.methods;
    options = OrderProgressBoardService.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @generated from protobuf rpc: GetOrderProgressBoards(Mgmt.LocationRequest) returns (Mgmt.OrderProgressBoardsVM);
     */
    getOrderProgressBoards(input: LocationRequest, options?: RpcOptions): UnaryCall<LocationRequest, OrderProgressBoardsVM> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<LocationRequest, OrderProgressBoardsVM>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: GetOrderProgressBoardOTP(Mgmt.DeviceLocationRequest) returns (Mgmt.DeviceLocationResponse);
     */
    getOrderProgressBoardOTP(input: DeviceLocationRequest, options?: RpcOptions): UnaryCall<DeviceLocationRequest, DeviceLocationResponse> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<DeviceLocationRequest, DeviceLocationResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: AddOrderProgressBoard(Mgmt.AddOrderProgressBoardRequest) returns (Mgmt.OrderProgressBoardVM);
     */
    addOrderProgressBoard(input: AddOrderProgressBoardRequest, options?: RpcOptions): UnaryCall<AddOrderProgressBoardRequest, OrderProgressBoardVM> {
        const method = this.methods[2], opt = this._transport.mergeOptions(options);
        return stackIntercept<AddOrderProgressBoardRequest, OrderProgressBoardVM>("unary", this._transport, method, opt, input);
    }
    /**
     * linking happens in kioskService
     *
     * @generated from protobuf rpc: UnlinkOrderProgressBoard(Mgmt.DeviceLocationRequest) returns (Mgmt.EmptyResponse);
     */
    unlinkOrderProgressBoard(input: DeviceLocationRequest, options?: RpcOptions): UnaryCall<DeviceLocationRequest, EmptyResponse> {
        const method = this.methods[3], opt = this._transport.mergeOptions(options);
        return stackIntercept<DeviceLocationRequest, EmptyResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: UpdateOrderProgressBoard(Mgmt.UpdateOrderProgressBoardDeviceRequest) returns (Mgmt.OrderProgressBoardVM);
     */
    updateOrderProgressBoard(input: UpdateOrderProgressBoardDeviceRequest, options?: RpcOptions): UnaryCall<UpdateOrderProgressBoardDeviceRequest, OrderProgressBoardVM> {
        const method = this.methods[4], opt = this._transport.mergeOptions(options);
        return stackIntercept<UpdateOrderProgressBoardDeviceRequest, OrderProgressBoardVM>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: RemoveOrderProgressBoard(Mgmt.DeviceLocationRequest) returns (Mgmt.EmptyResponse);
     */
    removeOrderProgressBoard(input: DeviceLocationRequest, options?: RpcOptions): UnaryCall<DeviceLocationRequest, EmptyResponse> {
        const method = this.methods[5], opt = this._transport.mergeOptions(options);
        return stackIntercept<DeviceLocationRequest, EmptyResponse>("unary", this._transport, method, opt, input);
    }
}
