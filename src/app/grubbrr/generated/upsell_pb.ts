/* eslint-disable */
// @generated by protobuf-ts 2.9.0 with parameter ts_nocheck,eslint_disable,add_pb_suffix,long_type_string,generate_dependencies
// @generated from protobuf file "upsell.proto" (package "Mgmt", syntax proto3)
// tslint:disable
// @ts-nocheck
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { ConditionsVM } from "./common_pb";
/**
 * @generated from protobuf message Mgmt.OrderUpsellGroupListVM
 */
export interface OrderUpsellGroupListVM {
    /**
     * @generated from protobuf field: repeated Mgmt.OrderUpsellGroupVM groups = 1;
     */
    groups: OrderUpsellGroupVM[];
}
/**
 * @generated from protobuf message Mgmt.OrderUpsellOfferVM
 */
export interface OrderUpsellOfferVM {
    /**
     * @generated from protobuf oneof: id
     */
    id: {
        oneofKind: "menuItemId";
        /**
         * @generated from protobuf field: string menuItemId = 1;
         */
        menuItemId: string;
    } | {
        oneofKind: "categoryId";
        /**
         * @generated from protobuf field: string categoryId = 2;
         */
        categoryId: string;
    } | {
        oneofKind: undefined;
    };
}
/**
 * @generated from protobuf message Mgmt.OrderUpsellGroupPropertiesVM
 */
export interface OrderUpsellGroupPropertiesVM {
    /**
     * @generated from protobuf field: string name = 1;
     */
    name: string;
    /**
     * @generated from protobuf field: string id = 2;
     */
    id: string;
    /**
     * @generated from protobuf field: bool enabled = 3;
     */
    enabled: boolean;
}
/**
 * @generated from protobuf message Mgmt.OrderUpsellGroupVM
 */
export interface OrderUpsellGroupVM {
    /**
     * @generated from protobuf field: Mgmt.OrderUpsellGroupPropertiesVM properties = 1;
     */
    properties?: OrderUpsellGroupPropertiesVM;
    /**
     * @generated from protobuf field: repeated Mgmt.OrderUpsellOfferVM offers = 2;
     */
    offers: OrderUpsellOfferVM[];
    /**
     * @generated from protobuf field: Mgmt.ConditionsVM conditions = 3;
     */
    conditions?: ConditionsVM;
}
/**
 * @generated from protobuf message Mgmt.ItemUpsellGroupListVM
 */
export interface ItemUpsellGroupListVM {
    /**
     * @generated from protobuf field: repeated Mgmt.ItemUpsellGroupVM groups = 1;
     */
    groups: ItemUpsellGroupVM[];
    /**
     * @generated from protobuf field: Mgmt.ItemUpsellMappingsVM mapping = 3;
     */
    mapping?: ItemUpsellMappingsVM;
}
/**
 * @generated from protobuf message Mgmt.ItemUpsellOfferVM
 */
export interface ItemUpsellOfferVM {
    /**
     * @generated from protobuf oneof: id
     */
    id: {
        oneofKind: "menuItemId";
        /**
         * @generated from protobuf field: string menuItemId = 1;
         */
        menuItemId: string;
    } | {
        oneofKind: "categoryId";
        /**
         * @generated from protobuf field: string categoryId = 2;
         */
        categoryId: string;
    } | {
        oneofKind: undefined;
    };
}
/**
 * @generated from protobuf message Mgmt.ItemUpsellGroupPropertiesVM
 */
export interface ItemUpsellGroupPropertiesVM {
    /**
     * @generated from protobuf field: string name = 1;
     */
    name: string;
    /**
     * @generated from protobuf field: string id = 2;
     */
    id: string;
    /**
     * @generated from protobuf field: bool enabled = 3;
     */
    enabled: boolean;
}
/**
 * @generated from protobuf message Mgmt.ItemUpsellGroupVM
 */
export interface ItemUpsellGroupVM {
    /**
     * @generated from protobuf field: Mgmt.ItemUpsellGroupPropertiesVM properties = 1;
     */
    properties?: ItemUpsellGroupPropertiesVM;
    /**
     * @generated from protobuf field: repeated Mgmt.ItemUpsellOfferVM offers = 2;
     */
    offers: ItemUpsellOfferVM[];
    /**
     * @generated from protobuf field: Mgmt.ConditionsVM conditions = 3;
     */
    conditions?: ConditionsVM;
    /**
     * @generated from protobuf field: repeated Mgmt.ItemUpsellMappingVM mapping = 4;
     */
    mapping: ItemUpsellMappingVM[];
}
/**
 * @generated from protobuf message Mgmt.ItemUpsellMappingsVM
 */
export interface ItemUpsellMappingsVM {
    /**
     * @generated from protobuf field: map<string, string> map = 1;
     */
    map: {
        [key: string]: string;
    };
}
/**
 * @generated from protobuf message Mgmt.ItemUpsellMappingVM
 */
export interface ItemUpsellMappingVM {
    /**
     * @generated from protobuf oneof: id
     */
    id: {
        oneofKind: "menuItemId";
        /**
         * @generated from protobuf field: string menuItemId = 1;
         */
        menuItemId: string;
    } | {
        oneofKind: "categoryId";
        /**
         * @generated from protobuf field: string categoryId = 2;
         */
        categoryId: string;
    } | {
        oneofKind: undefined;
    };
}
// @generated message type with reflection information, may provide speed optimized methods
class OrderUpsellGroupListVM$Type extends MessageType<OrderUpsellGroupListVM> {
    constructor() {
        super("Mgmt.OrderUpsellGroupListVM", [
            { no: 1, name: "groups", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => OrderUpsellGroupVM }
        ]);
    }
    create(value?: PartialMessage<OrderUpsellGroupListVM>): OrderUpsellGroupListVM {
        const message = { groups: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<OrderUpsellGroupListVM>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: OrderUpsellGroupListVM): OrderUpsellGroupListVM {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated Mgmt.OrderUpsellGroupVM groups */ 1:
                    message.groups.push(OrderUpsellGroupVM.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: OrderUpsellGroupListVM, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated Mgmt.OrderUpsellGroupVM groups = 1; */
        for (let i = 0; i < message.groups.length; i++)
            OrderUpsellGroupVM.internalBinaryWrite(message.groups[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message Mgmt.OrderUpsellGroupListVM
 */
export const OrderUpsellGroupListVM = new OrderUpsellGroupListVM$Type();
// @generated message type with reflection information, may provide speed optimized methods
class OrderUpsellOfferVM$Type extends MessageType<OrderUpsellOfferVM> {
    constructor() {
        super("Mgmt.OrderUpsellOfferVM", [
            { no: 1, name: "menuItemId", kind: "scalar", oneof: "id", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "categoryId", kind: "scalar", oneof: "id", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<OrderUpsellOfferVM>): OrderUpsellOfferVM {
        const message = { id: { oneofKind: undefined } };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<OrderUpsellOfferVM>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: OrderUpsellOfferVM): OrderUpsellOfferVM {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string menuItemId */ 1:
                    message.id = {
                        oneofKind: "menuItemId",
                        menuItemId: reader.string()
                    };
                    break;
                case /* string categoryId */ 2:
                    message.id = {
                        oneofKind: "categoryId",
                        categoryId: reader.string()
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: OrderUpsellOfferVM, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string menuItemId = 1; */
        if (message.id.oneofKind === "menuItemId")
            writer.tag(1, WireType.LengthDelimited).string(message.id.menuItemId);
        /* string categoryId = 2; */
        if (message.id.oneofKind === "categoryId")
            writer.tag(2, WireType.LengthDelimited).string(message.id.categoryId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message Mgmt.OrderUpsellOfferVM
 */
export const OrderUpsellOfferVM = new OrderUpsellOfferVM$Type();
// @generated message type with reflection information, may provide speed optimized methods
class OrderUpsellGroupPropertiesVM$Type extends MessageType<OrderUpsellGroupPropertiesVM> {
    constructor() {
        super("Mgmt.OrderUpsellGroupPropertiesVM", [
            { no: 1, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "enabled", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<OrderUpsellGroupPropertiesVM>): OrderUpsellGroupPropertiesVM {
        const message = { name: "", id: "", enabled: false };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<OrderUpsellGroupPropertiesVM>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: OrderUpsellGroupPropertiesVM): OrderUpsellGroupPropertiesVM {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string name */ 1:
                    message.name = reader.string();
                    break;
                case /* string id */ 2:
                    message.id = reader.string();
                    break;
                case /* bool enabled */ 3:
                    message.enabled = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: OrderUpsellGroupPropertiesVM, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string name = 1; */
        if (message.name !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.name);
        /* string id = 2; */
        if (message.id !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.id);
        /* bool enabled = 3; */
        if (message.enabled !== false)
            writer.tag(3, WireType.Varint).bool(message.enabled);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message Mgmt.OrderUpsellGroupPropertiesVM
 */
export const OrderUpsellGroupPropertiesVM = new OrderUpsellGroupPropertiesVM$Type();
// @generated message type with reflection information, may provide speed optimized methods
class OrderUpsellGroupVM$Type extends MessageType<OrderUpsellGroupVM> {
    constructor() {
        super("Mgmt.OrderUpsellGroupVM", [
            { no: 1, name: "properties", kind: "message", T: () => OrderUpsellGroupPropertiesVM },
            { no: 2, name: "offers", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => OrderUpsellOfferVM },
            { no: 3, name: "conditions", kind: "message", T: () => ConditionsVM }
        ]);
    }
    create(value?: PartialMessage<OrderUpsellGroupVM>): OrderUpsellGroupVM {
        const message = { offers: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<OrderUpsellGroupVM>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: OrderUpsellGroupVM): OrderUpsellGroupVM {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* Mgmt.OrderUpsellGroupPropertiesVM properties */ 1:
                    message.properties = OrderUpsellGroupPropertiesVM.internalBinaryRead(reader, reader.uint32(), options, message.properties);
                    break;
                case /* repeated Mgmt.OrderUpsellOfferVM offers */ 2:
                    message.offers.push(OrderUpsellOfferVM.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* Mgmt.ConditionsVM conditions */ 3:
                    message.conditions = ConditionsVM.internalBinaryRead(reader, reader.uint32(), options, message.conditions);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: OrderUpsellGroupVM, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* Mgmt.OrderUpsellGroupPropertiesVM properties = 1; */
        if (message.properties)
            OrderUpsellGroupPropertiesVM.internalBinaryWrite(message.properties, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* repeated Mgmt.OrderUpsellOfferVM offers = 2; */
        for (let i = 0; i < message.offers.length; i++)
            OrderUpsellOfferVM.internalBinaryWrite(message.offers[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* Mgmt.ConditionsVM conditions = 3; */
        if (message.conditions)
            ConditionsVM.internalBinaryWrite(message.conditions, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message Mgmt.OrderUpsellGroupVM
 */
export const OrderUpsellGroupVM = new OrderUpsellGroupVM$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ItemUpsellGroupListVM$Type extends MessageType<ItemUpsellGroupListVM> {
    constructor() {
        super("Mgmt.ItemUpsellGroupListVM", [
            { no: 1, name: "groups", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => ItemUpsellGroupVM },
            { no: 3, name: "mapping", kind: "message", T: () => ItemUpsellMappingsVM }
        ]);
    }
    create(value?: PartialMessage<ItemUpsellGroupListVM>): ItemUpsellGroupListVM {
        const message = { groups: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ItemUpsellGroupListVM>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ItemUpsellGroupListVM): ItemUpsellGroupListVM {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated Mgmt.ItemUpsellGroupVM groups */ 1:
                    message.groups.push(ItemUpsellGroupVM.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* Mgmt.ItemUpsellMappingsVM mapping */ 3:
                    message.mapping = ItemUpsellMappingsVM.internalBinaryRead(reader, reader.uint32(), options, message.mapping);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ItemUpsellGroupListVM, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated Mgmt.ItemUpsellGroupVM groups = 1; */
        for (let i = 0; i < message.groups.length; i++)
            ItemUpsellGroupVM.internalBinaryWrite(message.groups[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* Mgmt.ItemUpsellMappingsVM mapping = 3; */
        if (message.mapping)
            ItemUpsellMappingsVM.internalBinaryWrite(message.mapping, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message Mgmt.ItemUpsellGroupListVM
 */
export const ItemUpsellGroupListVM = new ItemUpsellGroupListVM$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ItemUpsellOfferVM$Type extends MessageType<ItemUpsellOfferVM> {
    constructor() {
        super("Mgmt.ItemUpsellOfferVM", [
            { no: 1, name: "menuItemId", kind: "scalar", oneof: "id", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "categoryId", kind: "scalar", oneof: "id", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ItemUpsellOfferVM>): ItemUpsellOfferVM {
        const message = { id: { oneofKind: undefined } };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ItemUpsellOfferVM>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ItemUpsellOfferVM): ItemUpsellOfferVM {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string menuItemId */ 1:
                    message.id = {
                        oneofKind: "menuItemId",
                        menuItemId: reader.string()
                    };
                    break;
                case /* string categoryId */ 2:
                    message.id = {
                        oneofKind: "categoryId",
                        categoryId: reader.string()
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ItemUpsellOfferVM, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string menuItemId = 1; */
        if (message.id.oneofKind === "menuItemId")
            writer.tag(1, WireType.LengthDelimited).string(message.id.menuItemId);
        /* string categoryId = 2; */
        if (message.id.oneofKind === "categoryId")
            writer.tag(2, WireType.LengthDelimited).string(message.id.categoryId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message Mgmt.ItemUpsellOfferVM
 */
export const ItemUpsellOfferVM = new ItemUpsellOfferVM$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ItemUpsellGroupPropertiesVM$Type extends MessageType<ItemUpsellGroupPropertiesVM> {
    constructor() {
        super("Mgmt.ItemUpsellGroupPropertiesVM", [
            { no: 1, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "enabled", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<ItemUpsellGroupPropertiesVM>): ItemUpsellGroupPropertiesVM {
        const message = { name: "", id: "", enabled: false };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ItemUpsellGroupPropertiesVM>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ItemUpsellGroupPropertiesVM): ItemUpsellGroupPropertiesVM {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string name */ 1:
                    message.name = reader.string();
                    break;
                case /* string id */ 2:
                    message.id = reader.string();
                    break;
                case /* bool enabled */ 3:
                    message.enabled = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ItemUpsellGroupPropertiesVM, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string name = 1; */
        if (message.name !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.name);
        /* string id = 2; */
        if (message.id !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.id);
        /* bool enabled = 3; */
        if (message.enabled !== false)
            writer.tag(3, WireType.Varint).bool(message.enabled);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message Mgmt.ItemUpsellGroupPropertiesVM
 */
export const ItemUpsellGroupPropertiesVM = new ItemUpsellGroupPropertiesVM$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ItemUpsellGroupVM$Type extends MessageType<ItemUpsellGroupVM> {
    constructor() {
        super("Mgmt.ItemUpsellGroupVM", [
            { no: 1, name: "properties", kind: "message", T: () => ItemUpsellGroupPropertiesVM },
            { no: 2, name: "offers", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => ItemUpsellOfferVM },
            { no: 3, name: "conditions", kind: "message", T: () => ConditionsVM },
            { no: 4, name: "mapping", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => ItemUpsellMappingVM }
        ]);
    }
    create(value?: PartialMessage<ItemUpsellGroupVM>): ItemUpsellGroupVM {
        const message = { offers: [], mapping: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ItemUpsellGroupVM>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ItemUpsellGroupVM): ItemUpsellGroupVM {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* Mgmt.ItemUpsellGroupPropertiesVM properties */ 1:
                    message.properties = ItemUpsellGroupPropertiesVM.internalBinaryRead(reader, reader.uint32(), options, message.properties);
                    break;
                case /* repeated Mgmt.ItemUpsellOfferVM offers */ 2:
                    message.offers.push(ItemUpsellOfferVM.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* Mgmt.ConditionsVM conditions */ 3:
                    message.conditions = ConditionsVM.internalBinaryRead(reader, reader.uint32(), options, message.conditions);
                    break;
                case /* repeated Mgmt.ItemUpsellMappingVM mapping */ 4:
                    message.mapping.push(ItemUpsellMappingVM.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ItemUpsellGroupVM, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* Mgmt.ItemUpsellGroupPropertiesVM properties = 1; */
        if (message.properties)
            ItemUpsellGroupPropertiesVM.internalBinaryWrite(message.properties, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* repeated Mgmt.ItemUpsellOfferVM offers = 2; */
        for (let i = 0; i < message.offers.length; i++)
            ItemUpsellOfferVM.internalBinaryWrite(message.offers[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* Mgmt.ConditionsVM conditions = 3; */
        if (message.conditions)
            ConditionsVM.internalBinaryWrite(message.conditions, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* repeated Mgmt.ItemUpsellMappingVM mapping = 4; */
        for (let i = 0; i < message.mapping.length; i++)
            ItemUpsellMappingVM.internalBinaryWrite(message.mapping[i], writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message Mgmt.ItemUpsellGroupVM
 */
export const ItemUpsellGroupVM = new ItemUpsellGroupVM$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ItemUpsellMappingsVM$Type extends MessageType<ItemUpsellMappingsVM> {
    constructor() {
        super("Mgmt.ItemUpsellMappingsVM", [
            { no: 1, name: "map", kind: "map", K: 9 /*ScalarType.STRING*/, V: { kind: "scalar", T: 9 /*ScalarType.STRING*/ } }
        ]);
    }
    create(value?: PartialMessage<ItemUpsellMappingsVM>): ItemUpsellMappingsVM {
        const message = { map: {} };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ItemUpsellMappingsVM>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ItemUpsellMappingsVM): ItemUpsellMappingsVM {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* map<string, string> map */ 1:
                    this.binaryReadMap1(message.map, reader, options);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    private binaryReadMap1(map: ItemUpsellMappingsVM["map"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof ItemUpsellMappingsVM["map"] | undefined, val: ItemUpsellMappingsVM["map"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.string();
                    break;
                case 2:
                    val = reader.string();
                    break;
                default: throw new globalThis.Error("unknown map entry field for field Mgmt.ItemUpsellMappingsVM.map");
            }
        }
        map[key ?? ""] = val ?? "";
    }
    internalBinaryWrite(message: ItemUpsellMappingsVM, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* map<string, string> map = 1; */
        for (let k of Object.keys(message.map))
            writer.tag(1, WireType.LengthDelimited).fork().tag(1, WireType.LengthDelimited).string(k).tag(2, WireType.LengthDelimited).string(message.map[k]).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message Mgmt.ItemUpsellMappingsVM
 */
export const ItemUpsellMappingsVM = new ItemUpsellMappingsVM$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ItemUpsellMappingVM$Type extends MessageType<ItemUpsellMappingVM> {
    constructor() {
        super("Mgmt.ItemUpsellMappingVM", [
            { no: 1, name: "menuItemId", kind: "scalar", oneof: "id", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "categoryId", kind: "scalar", oneof: "id", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ItemUpsellMappingVM>): ItemUpsellMappingVM {
        const message = { id: { oneofKind: undefined } };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ItemUpsellMappingVM>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ItemUpsellMappingVM): ItemUpsellMappingVM {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string menuItemId */ 1:
                    message.id = {
                        oneofKind: "menuItemId",
                        menuItemId: reader.string()
                    };
                    break;
                case /* string categoryId */ 2:
                    message.id = {
                        oneofKind: "categoryId",
                        categoryId: reader.string()
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ItemUpsellMappingVM, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string menuItemId = 1; */
        if (message.id.oneofKind === "menuItemId")
            writer.tag(1, WireType.LengthDelimited).string(message.id.menuItemId);
        /* string categoryId = 2; */
        if (message.id.oneofKind === "categoryId")
            writer.tag(2, WireType.LengthDelimited).string(message.id.categoryId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message Mgmt.ItemUpsellMappingVM
 */
export const ItemUpsellMappingVM = new ItemUpsellMappingVM$Type();
