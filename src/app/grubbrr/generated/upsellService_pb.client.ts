/* eslint-disable */
// @generated by protobuf-ts 2.9.0 with parameter ts_nocheck,eslint_disable,add_pb_suffix,long_type_string,generate_dependencies
// @generated from protobuf file "upsellService.proto" (package "Mgmt", syntax proto3)
// tslint:disable
// @ts-nocheck
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { UpsellService } from "./upsellService_pb";
import type { UpsertItemUpsellMappingRequest } from "./upsellService_pb";
import type { ItemUpsellMappingsVM } from "./upsell_pb";
import type { UpsertItemUpsellGroupsRequest } from "./upsellService_pb";
import type { ItemUpsellGroupListVM } from "./upsell_pb";
import type { EmptyResponse } from "./common_pb";
import type { UpsertOrderUpsellGroupsRequest } from "./upsellService_pb";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { OrderUpsellGroupListVM } from "./upsell_pb";
import type { LocationRequest } from "./common_pb";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * @generated from protobuf service Mgmt.UpsellService
 */
export interface IUpsellServiceClient {
    /**
     * @generated from protobuf rpc: GetOrderUpsellGroups(Mgmt.LocationRequest) returns (Mgmt.OrderUpsellGroupListVM);
     */
    getOrderUpsellGroups(input: LocationRequest, options?: RpcOptions): UnaryCall<LocationRequest, OrderUpsellGroupListVM>;
    /**
     * @generated from protobuf rpc: UpsertOrderUpsellGroups(Mgmt.UpsertOrderUpsellGroupsRequest) returns (Mgmt.EmptyResponse);
     */
    upsertOrderUpsellGroups(input: UpsertOrderUpsellGroupsRequest, options?: RpcOptions): UnaryCall<UpsertOrderUpsellGroupsRequest, EmptyResponse>;
    /**
     * @generated from protobuf rpc: GetItemUpsellGroups(Mgmt.LocationRequest) returns (Mgmt.ItemUpsellGroupListVM);
     */
    getItemUpsellGroups(input: LocationRequest, options?: RpcOptions): UnaryCall<LocationRequest, ItemUpsellGroupListVM>;
    /**
     * @generated from protobuf rpc: UpsertItemUpsellGroups(Mgmt.UpsertItemUpsellGroupsRequest) returns (Mgmt.EmptyResponse);
     */
    upsertItemUpsellGroups(input: UpsertItemUpsellGroupsRequest, options?: RpcOptions): UnaryCall<UpsertItemUpsellGroupsRequest, EmptyResponse>;
    /**
     * @generated from protobuf rpc: GetItemUpsellMappings(Mgmt.LocationRequest) returns (Mgmt.ItemUpsellMappingsVM);
     */
    getItemUpsellMappings(input: LocationRequest, options?: RpcOptions): UnaryCall<LocationRequest, ItemUpsellMappingsVM>;
    /**
     * @generated from protobuf rpc: UpsertItemUpsellMappings(Mgmt.UpsertItemUpsellMappingRequest) returns (Mgmt.ItemUpsellMappingsVM);
     */
    upsertItemUpsellMappings(input: UpsertItemUpsellMappingRequest, options?: RpcOptions): UnaryCall<UpsertItemUpsellMappingRequest, ItemUpsellMappingsVM>;
}
/**
 * @generated from protobuf service Mgmt.UpsellService
 */
export class UpsellServiceClient implements IUpsellServiceClient, ServiceInfo {
    typeName = UpsellService.typeName;
    methods = UpsellService.methods;
    options = UpsellService.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @generated from protobuf rpc: GetOrderUpsellGroups(Mgmt.LocationRequest) returns (Mgmt.OrderUpsellGroupListVM);
     */
    getOrderUpsellGroups(input: LocationRequest, options?: RpcOptions): UnaryCall<LocationRequest, OrderUpsellGroupListVM> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<LocationRequest, OrderUpsellGroupListVM>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: UpsertOrderUpsellGroups(Mgmt.UpsertOrderUpsellGroupsRequest) returns (Mgmt.EmptyResponse);
     */
    upsertOrderUpsellGroups(input: UpsertOrderUpsellGroupsRequest, options?: RpcOptions): UnaryCall<UpsertOrderUpsellGroupsRequest, EmptyResponse> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<UpsertOrderUpsellGroupsRequest, EmptyResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: GetItemUpsellGroups(Mgmt.LocationRequest) returns (Mgmt.ItemUpsellGroupListVM);
     */
    getItemUpsellGroups(input: LocationRequest, options?: RpcOptions): UnaryCall<LocationRequest, ItemUpsellGroupListVM> {
        const method = this.methods[2], opt = this._transport.mergeOptions(options);
        return stackIntercept<LocationRequest, ItemUpsellGroupListVM>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: UpsertItemUpsellGroups(Mgmt.UpsertItemUpsellGroupsRequest) returns (Mgmt.EmptyResponse);
     */
    upsertItemUpsellGroups(input: UpsertItemUpsellGroupsRequest, options?: RpcOptions): UnaryCall<UpsertItemUpsellGroupsRequest, EmptyResponse> {
        const method = this.methods[3], opt = this._transport.mergeOptions(options);
        return stackIntercept<UpsertItemUpsellGroupsRequest, EmptyResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: GetItemUpsellMappings(Mgmt.LocationRequest) returns (Mgmt.ItemUpsellMappingsVM);
     */
    getItemUpsellMappings(input: LocationRequest, options?: RpcOptions): UnaryCall<LocationRequest, ItemUpsellMappingsVM> {
        const method = this.methods[4], opt = this._transport.mergeOptions(options);
        return stackIntercept<LocationRequest, ItemUpsellMappingsVM>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: UpsertItemUpsellMappings(Mgmt.UpsertItemUpsellMappingRequest) returns (Mgmt.ItemUpsellMappingsVM);
     */
    upsertItemUpsellMappings(input: UpsertItemUpsellMappingRequest, options?: RpcOptions): UnaryCall<UpsertItemUpsellMappingRequest, ItemUpsellMappingsVM> {
        const method = this.methods[5], opt = this._transport.mergeOptions(options);
        return stackIntercept<UpsertItemUpsellMappingRequest, ItemUpsellMappingsVM>("unary", this._transport, method, opt, input);
    }
}
