/* eslint-disable */
// @generated by protobuf-ts 2.9.0 with parameter ts_nocheck,eslint_disable,add_pb_suffix,long_type_string,generate_dependencies
// @generated from protobuf file "upsellService.proto" (package "Mgmt", syntax proto3)
// tslint:disable
// @ts-nocheck
import { EmptyResponse } from "./common_pb";
import { LocationRequest } from "./common_pb";
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { ItemUpsellMappingsVM } from "./upsell_pb";
import { ItemUpsellGroupListVM } from "./upsell_pb";
import { OrderUpsellGroupListVM } from "./upsell_pb";
/**
 * @generated from protobuf message Mgmt.UpsertOrderUpsellGroupsRequest
 */
export interface UpsertOrderUpsellGroupsRequest {
    /**
     * @generated from protobuf field: string locationId = 1;
     */
    locationId: string;
    /**
     * @generated from protobuf field: Mgmt.OrderUpsellGroupListVM groups = 2;
     */
    groups?: OrderUpsellGroupListVM;
}
/**
 * @generated from protobuf message Mgmt.UpsertItemUpsellGroupsRequest
 */
export interface UpsertItemUpsellGroupsRequest {
    /**
     * @generated from protobuf field: string locationId = 1;
     */
    locationId: string;
    /**
     * @generated from protobuf field: Mgmt.ItemUpsellGroupListVM groups = 2;
     */
    groups?: ItemUpsellGroupListVM;
}
/**
 * @generated from protobuf message Mgmt.UpsertItemUpsellMappingRequest
 */
export interface UpsertItemUpsellMappingRequest {
    /**
     * @generated from protobuf field: string locationId = 1;
     */
    locationId: string;
    /**
     * @generated from protobuf field: Mgmt.ItemUpsellMappingsVM mapping = 2;
     */
    mapping?: ItemUpsellMappingsVM;
}
// @generated message type with reflection information, may provide speed optimized methods
class UpsertOrderUpsellGroupsRequest$Type extends MessageType<UpsertOrderUpsellGroupsRequest> {
    constructor() {
        super("Mgmt.UpsertOrderUpsellGroupsRequest", [
            { no: 1, name: "locationId", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "groups", kind: "message", T: () => OrderUpsellGroupListVM }
        ]);
    }
    create(value?: PartialMessage<UpsertOrderUpsellGroupsRequest>): UpsertOrderUpsellGroupsRequest {
        const message = { locationId: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<UpsertOrderUpsellGroupsRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UpsertOrderUpsellGroupsRequest): UpsertOrderUpsellGroupsRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string locationId */ 1:
                    message.locationId = reader.string();
                    break;
                case /* Mgmt.OrderUpsellGroupListVM groups */ 2:
                    message.groups = OrderUpsellGroupListVM.internalBinaryRead(reader, reader.uint32(), options, message.groups);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UpsertOrderUpsellGroupsRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string locationId = 1; */
        if (message.locationId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.locationId);
        /* Mgmt.OrderUpsellGroupListVM groups = 2; */
        if (message.groups)
            OrderUpsellGroupListVM.internalBinaryWrite(message.groups, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message Mgmt.UpsertOrderUpsellGroupsRequest
 */
export const UpsertOrderUpsellGroupsRequest = new UpsertOrderUpsellGroupsRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpsertItemUpsellGroupsRequest$Type extends MessageType<UpsertItemUpsellGroupsRequest> {
    constructor() {
        super("Mgmt.UpsertItemUpsellGroupsRequest", [
            { no: 1, name: "locationId", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "groups", kind: "message", T: () => ItemUpsellGroupListVM }
        ]);
    }
    create(value?: PartialMessage<UpsertItemUpsellGroupsRequest>): UpsertItemUpsellGroupsRequest {
        const message = { locationId: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<UpsertItemUpsellGroupsRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UpsertItemUpsellGroupsRequest): UpsertItemUpsellGroupsRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string locationId */ 1:
                    message.locationId = reader.string();
                    break;
                case /* Mgmt.ItemUpsellGroupListVM groups */ 2:
                    message.groups = ItemUpsellGroupListVM.internalBinaryRead(reader, reader.uint32(), options, message.groups);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UpsertItemUpsellGroupsRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string locationId = 1; */
        if (message.locationId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.locationId);
        /* Mgmt.ItemUpsellGroupListVM groups = 2; */
        if (message.groups)
            ItemUpsellGroupListVM.internalBinaryWrite(message.groups, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message Mgmt.UpsertItemUpsellGroupsRequest
 */
export const UpsertItemUpsellGroupsRequest = new UpsertItemUpsellGroupsRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpsertItemUpsellMappingRequest$Type extends MessageType<UpsertItemUpsellMappingRequest> {
    constructor() {
        super("Mgmt.UpsertItemUpsellMappingRequest", [
            { no: 1, name: "locationId", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "mapping", kind: "message", T: () => ItemUpsellMappingsVM }
        ]);
    }
    create(value?: PartialMessage<UpsertItemUpsellMappingRequest>): UpsertItemUpsellMappingRequest {
        const message = { locationId: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<UpsertItemUpsellMappingRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UpsertItemUpsellMappingRequest): UpsertItemUpsellMappingRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string locationId */ 1:
                    message.locationId = reader.string();
                    break;
                case /* Mgmt.ItemUpsellMappingsVM mapping */ 2:
                    message.mapping = ItemUpsellMappingsVM.internalBinaryRead(reader, reader.uint32(), options, message.mapping);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UpsertItemUpsellMappingRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string locationId = 1; */
        if (message.locationId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.locationId);
        /* Mgmt.ItemUpsellMappingsVM mapping = 2; */
        if (message.mapping)
            ItemUpsellMappingsVM.internalBinaryWrite(message.mapping, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message Mgmt.UpsertItemUpsellMappingRequest
 */
export const UpsertItemUpsellMappingRequest = new UpsertItemUpsellMappingRequest$Type();
/**
 * @generated ServiceType for protobuf service Mgmt.UpsellService
 */
export const UpsellService = new ServiceType("Mgmt.UpsellService", [
    { name: "GetOrderUpsellGroups", options: {}, I: LocationRequest, O: OrderUpsellGroupListVM },
    { name: "UpsertOrderUpsellGroups", options: {}, I: UpsertOrderUpsellGroupsRequest, O: EmptyResponse },
    { name: "GetItemUpsellGroups", options: {}, I: LocationRequest, O: ItemUpsellGroupListVM },
    { name: "UpsertItemUpsellGroups", options: {}, I: UpsertItemUpsellGroupsRequest, O: EmptyResponse },
    { name: "GetItemUpsellMappings", options: {}, I: LocationRequest, O: ItemUpsellMappingsVM },
    { name: "UpsertItemUpsellMappings", options: {}, I: UpsertItemUpsellMappingRequest, O: ItemUpsellMappingsVM }
]);
