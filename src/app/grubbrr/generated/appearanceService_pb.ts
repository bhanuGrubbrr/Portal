/* eslint-disable */
// @generated by protobuf-ts 2.9.0 with parameter ts_nocheck,eslint_disable,add_pb_suffix,long_type_string,generate_dependencies
// @generated from protobuf file "appearanceService.proto" (package "Mgmt", syntax proto3)
// tslint:disable
// @ts-nocheck
import { TemplateConfigVM } from "./appearance_pb";
import { LocationRequest } from "./common_pb";
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { AnimationsVM } from "./appearance_pb";
import { ReceiptSettingsVM } from "./appearance_pb";
import { AppearanceMediaAssetVM } from "./appearance_pb";
import { TemplateImagesVM } from "./appearance_pb";
import { TemplateSettingsVM } from "./appearance_pb";
import { TemplateLanguageTextVM } from "./appearance_pb";
import { LoyaltyColorsVM } from "./appearance_pb";
import { KioskColorsVM } from "./appearance_pb";
/**
 * @generated from protobuf message Mgmt.ColorsRequest
 */
export interface ColorsRequest {
    /**
     * @generated from protobuf field: string locationId = 1;
     */
    locationId: string;
    /**
     * @generated from protobuf field: Mgmt.KioskColorsVM colors = 2;
     */
    colors?: KioskColorsVM;
}
/**
 * @generated from protobuf message Mgmt.LoyaltyColorsRequest
 */
export interface LoyaltyColorsRequest {
    /**
     * @generated from protobuf field: string locationId = 1;
     */
    locationId: string;
    /**
     * @generated from protobuf field: Mgmt.LoyaltyColorsVM loyaltyColors = 2;
     */
    loyaltyColors?: LoyaltyColorsVM;
}
/**
 * @generated from protobuf message Mgmt.UpdateTemplateTextOverridesRequest
 */
export interface UpdateTemplateTextOverridesRequest {
    /**
     * @generated from protobuf field: string locationId = 1;
     */
    locationId: string;
    /**
     * @generated from protobuf field: Mgmt.TemplateLanguageTextVM overrideText = 2;
     */
    overrideText?: TemplateLanguageTextVM;
}
/**
 * @generated from protobuf message Mgmt.UpdateTemplateSettingsRequest
 */
export interface UpdateTemplateSettingsRequest {
    /**
     * @generated from protobuf field: string locationId = 1;
     */
    locationId: string;
    /**
     * @generated from protobuf field: Mgmt.TemplateSettingsVM settings = 2;
     */
    settings?: TemplateSettingsVM;
}
/**
 * @generated from protobuf message Mgmt.UpdateTemplateImagesRequest
 */
export interface UpdateTemplateImagesRequest {
    /**
     * @generated from protobuf field: string locationId = 1;
     */
    locationId: string;
    /**
     * @generated from protobuf field: Mgmt.TemplateImagesVM images = 2;
     */
    images?: TemplateImagesVM;
}
/**
 * @generated from protobuf message Mgmt.AddScreensaverRequest
 */
export interface AddScreensaverRequest {
    /**
     * @generated from protobuf field: string locationId = 1;
     */
    locationId: string;
    /**
     * @generated from protobuf field: Mgmt.AppearanceMediaAssetVM screensaver = 2;
     */
    screensaver?: AppearanceMediaAssetVM;
}
/**
 * @generated from protobuf message Mgmt.RemoveScreensaverRequest
 */
export interface RemoveScreensaverRequest {
    /**
     * @generated from protobuf field: string locationId = 1;
     */
    locationId: string;
    /**
     * @generated from protobuf field: string screensaverId = 2;
     */
    screensaverId: string;
}
/**
 * @generated from protobuf message Mgmt.ReceiptSettingsRequest
 */
export interface ReceiptSettingsRequest {
    /**
     * @generated from protobuf field: string locationId = 1;
     */
    locationId: string;
    /**
     * @generated from protobuf field: Mgmt.ReceiptSettingsVM settings = 2;
     */
    settings?: ReceiptSettingsVM;
}
/**
 * @generated from protobuf message Mgmt.UpdateTemplateAnimationsRequest
 */
export interface UpdateTemplateAnimationsRequest {
    /**
     * @generated from protobuf field: string locationId = 1;
     */
    locationId: string;
    /**
     * @generated from protobuf field: Mgmt.AnimationsVM animations = 2;
     */
    animations?: AnimationsVM;
}
// @generated message type with reflection information, may provide speed optimized methods
class ColorsRequest$Type extends MessageType<ColorsRequest> {
    constructor() {
        super("Mgmt.ColorsRequest", [
            { no: 1, name: "locationId", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "colors", kind: "message", T: () => KioskColorsVM }
        ]);
    }
    create(value?: PartialMessage<ColorsRequest>): ColorsRequest {
        const message = { locationId: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ColorsRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ColorsRequest): ColorsRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string locationId */ 1:
                    message.locationId = reader.string();
                    break;
                case /* Mgmt.KioskColorsVM colors */ 2:
                    message.colors = KioskColorsVM.internalBinaryRead(reader, reader.uint32(), options, message.colors);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ColorsRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string locationId = 1; */
        if (message.locationId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.locationId);
        /* Mgmt.KioskColorsVM colors = 2; */
        if (message.colors)
            KioskColorsVM.internalBinaryWrite(message.colors, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message Mgmt.ColorsRequest
 */
export const ColorsRequest = new ColorsRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LoyaltyColorsRequest$Type extends MessageType<LoyaltyColorsRequest> {
    constructor() {
        super("Mgmt.LoyaltyColorsRequest", [
            { no: 1, name: "locationId", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "loyaltyColors", kind: "message", T: () => LoyaltyColorsVM }
        ]);
    }
    create(value?: PartialMessage<LoyaltyColorsRequest>): LoyaltyColorsRequest {
        const message = { locationId: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<LoyaltyColorsRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LoyaltyColorsRequest): LoyaltyColorsRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string locationId */ 1:
                    message.locationId = reader.string();
                    break;
                case /* Mgmt.LoyaltyColorsVM loyaltyColors */ 2:
                    message.loyaltyColors = LoyaltyColorsVM.internalBinaryRead(reader, reader.uint32(), options, message.loyaltyColors);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LoyaltyColorsRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string locationId = 1; */
        if (message.locationId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.locationId);
        /* Mgmt.LoyaltyColorsVM loyaltyColors = 2; */
        if (message.loyaltyColors)
            LoyaltyColorsVM.internalBinaryWrite(message.loyaltyColors, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message Mgmt.LoyaltyColorsRequest
 */
export const LoyaltyColorsRequest = new LoyaltyColorsRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpdateTemplateTextOverridesRequest$Type extends MessageType<UpdateTemplateTextOverridesRequest> {
    constructor() {
        super("Mgmt.UpdateTemplateTextOverridesRequest", [
            { no: 1, name: "locationId", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "overrideText", kind: "message", T: () => TemplateLanguageTextVM }
        ]);
    }
    create(value?: PartialMessage<UpdateTemplateTextOverridesRequest>): UpdateTemplateTextOverridesRequest {
        const message = { locationId: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<UpdateTemplateTextOverridesRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UpdateTemplateTextOverridesRequest): UpdateTemplateTextOverridesRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string locationId */ 1:
                    message.locationId = reader.string();
                    break;
                case /* Mgmt.TemplateLanguageTextVM overrideText */ 2:
                    message.overrideText = TemplateLanguageTextVM.internalBinaryRead(reader, reader.uint32(), options, message.overrideText);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UpdateTemplateTextOverridesRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string locationId = 1; */
        if (message.locationId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.locationId);
        /* Mgmt.TemplateLanguageTextVM overrideText = 2; */
        if (message.overrideText)
            TemplateLanguageTextVM.internalBinaryWrite(message.overrideText, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message Mgmt.UpdateTemplateTextOverridesRequest
 */
export const UpdateTemplateTextOverridesRequest = new UpdateTemplateTextOverridesRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpdateTemplateSettingsRequest$Type extends MessageType<UpdateTemplateSettingsRequest> {
    constructor() {
        super("Mgmt.UpdateTemplateSettingsRequest", [
            { no: 1, name: "locationId", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "settings", kind: "message", T: () => TemplateSettingsVM }
        ]);
    }
    create(value?: PartialMessage<UpdateTemplateSettingsRequest>): UpdateTemplateSettingsRequest {
        const message = { locationId: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<UpdateTemplateSettingsRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UpdateTemplateSettingsRequest): UpdateTemplateSettingsRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string locationId */ 1:
                    message.locationId = reader.string();
                    break;
                case /* Mgmt.TemplateSettingsVM settings */ 2:
                    message.settings = TemplateSettingsVM.internalBinaryRead(reader, reader.uint32(), options, message.settings);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UpdateTemplateSettingsRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string locationId = 1; */
        if (message.locationId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.locationId);
        /* Mgmt.TemplateSettingsVM settings = 2; */
        if (message.settings)
            TemplateSettingsVM.internalBinaryWrite(message.settings, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message Mgmt.UpdateTemplateSettingsRequest
 */
export const UpdateTemplateSettingsRequest = new UpdateTemplateSettingsRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpdateTemplateImagesRequest$Type extends MessageType<UpdateTemplateImagesRequest> {
    constructor() {
        super("Mgmt.UpdateTemplateImagesRequest", [
            { no: 1, name: "locationId", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "images", kind: "message", T: () => TemplateImagesVM }
        ]);
    }
    create(value?: PartialMessage<UpdateTemplateImagesRequest>): UpdateTemplateImagesRequest {
        const message = { locationId: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<UpdateTemplateImagesRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UpdateTemplateImagesRequest): UpdateTemplateImagesRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string locationId */ 1:
                    message.locationId = reader.string();
                    break;
                case /* Mgmt.TemplateImagesVM images */ 2:
                    message.images = TemplateImagesVM.internalBinaryRead(reader, reader.uint32(), options, message.images);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UpdateTemplateImagesRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string locationId = 1; */
        if (message.locationId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.locationId);
        /* Mgmt.TemplateImagesVM images = 2; */
        if (message.images)
            TemplateImagesVM.internalBinaryWrite(message.images, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message Mgmt.UpdateTemplateImagesRequest
 */
export const UpdateTemplateImagesRequest = new UpdateTemplateImagesRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AddScreensaverRequest$Type extends MessageType<AddScreensaverRequest> {
    constructor() {
        super("Mgmt.AddScreensaverRequest", [
            { no: 1, name: "locationId", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "screensaver", kind: "message", T: () => AppearanceMediaAssetVM }
        ]);
    }
    create(value?: PartialMessage<AddScreensaverRequest>): AddScreensaverRequest {
        const message = { locationId: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<AddScreensaverRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AddScreensaverRequest): AddScreensaverRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string locationId */ 1:
                    message.locationId = reader.string();
                    break;
                case /* Mgmt.AppearanceMediaAssetVM screensaver */ 2:
                    message.screensaver = AppearanceMediaAssetVM.internalBinaryRead(reader, reader.uint32(), options, message.screensaver);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AddScreensaverRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string locationId = 1; */
        if (message.locationId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.locationId);
        /* Mgmt.AppearanceMediaAssetVM screensaver = 2; */
        if (message.screensaver)
            AppearanceMediaAssetVM.internalBinaryWrite(message.screensaver, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message Mgmt.AddScreensaverRequest
 */
export const AddScreensaverRequest = new AddScreensaverRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RemoveScreensaverRequest$Type extends MessageType<RemoveScreensaverRequest> {
    constructor() {
        super("Mgmt.RemoveScreensaverRequest", [
            { no: 1, name: "locationId", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "screensaverId", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<RemoveScreensaverRequest>): RemoveScreensaverRequest {
        const message = { locationId: "", screensaverId: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<RemoveScreensaverRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RemoveScreensaverRequest): RemoveScreensaverRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string locationId */ 1:
                    message.locationId = reader.string();
                    break;
                case /* string screensaverId */ 2:
                    message.screensaverId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RemoveScreensaverRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string locationId = 1; */
        if (message.locationId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.locationId);
        /* string screensaverId = 2; */
        if (message.screensaverId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.screensaverId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message Mgmt.RemoveScreensaverRequest
 */
export const RemoveScreensaverRequest = new RemoveScreensaverRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ReceiptSettingsRequest$Type extends MessageType<ReceiptSettingsRequest> {
    constructor() {
        super("Mgmt.ReceiptSettingsRequest", [
            { no: 1, name: "locationId", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "settings", kind: "message", T: () => ReceiptSettingsVM }
        ]);
    }
    create(value?: PartialMessage<ReceiptSettingsRequest>): ReceiptSettingsRequest {
        const message = { locationId: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ReceiptSettingsRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ReceiptSettingsRequest): ReceiptSettingsRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string locationId */ 1:
                    message.locationId = reader.string();
                    break;
                case /* Mgmt.ReceiptSettingsVM settings */ 2:
                    message.settings = ReceiptSettingsVM.internalBinaryRead(reader, reader.uint32(), options, message.settings);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ReceiptSettingsRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string locationId = 1; */
        if (message.locationId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.locationId);
        /* Mgmt.ReceiptSettingsVM settings = 2; */
        if (message.settings)
            ReceiptSettingsVM.internalBinaryWrite(message.settings, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message Mgmt.ReceiptSettingsRequest
 */
export const ReceiptSettingsRequest = new ReceiptSettingsRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpdateTemplateAnimationsRequest$Type extends MessageType<UpdateTemplateAnimationsRequest> {
    constructor() {
        super("Mgmt.UpdateTemplateAnimationsRequest", [
            { no: 1, name: "locationId", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "animations", kind: "message", T: () => AnimationsVM }
        ]);
    }
    create(value?: PartialMessage<UpdateTemplateAnimationsRequest>): UpdateTemplateAnimationsRequest {
        const message = { locationId: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<UpdateTemplateAnimationsRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UpdateTemplateAnimationsRequest): UpdateTemplateAnimationsRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string locationId */ 1:
                    message.locationId = reader.string();
                    break;
                case /* Mgmt.AnimationsVM animations */ 2:
                    message.animations = AnimationsVM.internalBinaryRead(reader, reader.uint32(), options, message.animations);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UpdateTemplateAnimationsRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string locationId = 1; */
        if (message.locationId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.locationId);
        /* Mgmt.AnimationsVM animations = 2; */
        if (message.animations)
            AnimationsVM.internalBinaryWrite(message.animations, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message Mgmt.UpdateTemplateAnimationsRequest
 */
export const UpdateTemplateAnimationsRequest = new UpdateTemplateAnimationsRequest$Type();
/**
 * @generated ServiceType for protobuf service Mgmt.AppearanceService
 */
export const AppearanceService = new ServiceType("Mgmt.AppearanceService", [
    { name: "GetColors", options: {}, I: LocationRequest, O: KioskColorsVM },
    { name: "GetLoyaltyColors", options: {}, I: LocationRequest, O: LoyaltyColorsVM },
    { name: "UpsertColors", options: {}, I: ColorsRequest, O: KioskColorsVM },
    { name: "UpsertLoyaltyColors", options: {}, I: LoyaltyColorsRequest, O: LoyaltyColorsVM },
    { name: "GetTemplateConfig", options: {}, I: LocationRequest, O: TemplateConfigVM },
    { name: "UpdateTemplateTextOverrides", options: {}, I: UpdateTemplateTextOverridesRequest, O: TemplateLanguageTextVM },
    { name: "UpdateTemplateSettings", options: {}, I: UpdateTemplateSettingsRequest, O: TemplateSettingsVM },
    { name: "UpdateTemplateImages", options: {}, I: UpdateTemplateImagesRequest, O: TemplateImagesVM },
    { name: "UpdateTemplateAnimations", options: {}, I: UpdateTemplateAnimationsRequest, O: AnimationsVM },
    { name: "AddScreensaver", options: {}, I: AddScreensaverRequest, O: AppearanceMediaAssetVM },
    { name: "RemoveScreensaver", options: {}, I: RemoveScreensaverRequest, O: AppearanceMediaAssetVM },
    { name: "GetReceiptSettings", options: {}, I: LocationRequest, O: ReceiptSettingsVM },
    { name: "UpsertReceiptSettings", options: {}, I: ReceiptSettingsRequest, O: ReceiptSettingsVM }
]);
