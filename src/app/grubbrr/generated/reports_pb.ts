/* eslint-disable */
// @generated by protobuf-ts 2.9.0 with parameter ts_nocheck,eslint_disable,add_pb_suffix,long_type_string,generate_dependencies
// @generated from protobuf file "reports.proto" (package "Report", syntax proto3)
// tslint:disable
// @ts-nocheck
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message Report.KPIDashboardReportVM
 */
export interface KPIDashboardReportVM {
    /**
     * @generated from protobuf field: Report.KPIDashboardSummaryVM summary = 1;
     */
    summary?: KPIDashboardSummaryVM;
    /**
     * @generated from protobuf field: Report.KPIDashboardReportTopSellersVM topSellersByItem = 2;
     */
    topSellersByItem?: KPIDashboardReportTopSellersVM;
    /**
     * @generated from protobuf field: Report.KPIDashboardReportTopSellersVM topSellersByCategory = 3;
     */
    topSellersByCategory?: KPIDashboardReportTopSellersVM;
    /**
     * @generated from protobuf field: Report.KPIDashboardReportCustomersVM customers = 4;
     */
    customers?: KPIDashboardReportCustomersVM;
    /**
     * @generated from protobuf field: double averageOrder = 5;
     */
    averageOrder: number;
    /**
     * @generated from protobuf field: double highestOrder = 6;
     */
    highestOrder: number;
    /**
     * @generated from protobuf field: double lowestOrder = 7;
     */
    lowestOrder: number;
    /**
     * @generated from protobuf field: double totalNumberOfOrders = 8;
     */
    totalNumberOfOrders: number;
    /**
     * @generated from protobuf field: double totalTips = 9;
     */
    totalTips: number;
    /**
     * @generated from protobuf field: double totalUpsells = 10;
     */
    totalUpsells: number;
    /**
     * @generated from protobuf field: string currencyCode = 11;
     */
    currencyCode: string;
    /**
     * @generated from protobuf field: string localeCode = 12;
     */
    localeCode: string;
}
/**
 * @generated from protobuf message Report.KPIDashboardReportCustomersVM
 */
export interface KPIDashboardReportCustomersVM {
    /**
     * @generated from protobuf field: repeated Report.ReportField reportFields = 1;
     */
    reportFields: ReportField[];
}
/**
 * @generated from protobuf message Report.KPIDashboardReportTopSellersVM
 */
export interface KPIDashboardReportTopSellersVM {
    /**
     * @generated from protobuf field: repeated Report.ReportField reportFields = 1;
     */
    reportFields: ReportField[];
}
/**
 * @generated from protobuf message Report.KPIDashboardSummaryVM
 */
export interface KPIDashboardSummaryVM {
    /**
     * @generated from protobuf field: repeated Report.ReportField reportFields = 1;
     */
    reportFields: ReportField[];
}
/**
 * @generated from protobuf message Report.ReportField
 */
export interface ReportField {
    /**
     * @generated from protobuf field: string label = 1;
     */
    label: string;
    /**
     * @generated from protobuf field: double value = 2;
     */
    value: number;
    /**
     * @generated from protobuf field: string tooltip = 3;
     */
    tooltip: string;
}
// @generated message type with reflection information, may provide speed optimized methods
class KPIDashboardReportVM$Type extends MessageType<KPIDashboardReportVM> {
    constructor() {
        super("Report.KPIDashboardReportVM", [
            { no: 1, name: "summary", kind: "message", T: () => KPIDashboardSummaryVM },
            { no: 2, name: "topSellersByItem", kind: "message", T: () => KPIDashboardReportTopSellersVM },
            { no: 3, name: "topSellersByCategory", kind: "message", T: () => KPIDashboardReportTopSellersVM },
            { no: 4, name: "customers", kind: "message", T: () => KPIDashboardReportCustomersVM },
            { no: 5, name: "averageOrder", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 6, name: "highestOrder", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 7, name: "lowestOrder", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 8, name: "totalNumberOfOrders", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 9, name: "totalTips", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 10, name: "totalUpsells", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 11, name: "currencyCode", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 12, name: "localeCode", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<KPIDashboardReportVM>): KPIDashboardReportVM {
        const message = { averageOrder: 0, highestOrder: 0, lowestOrder: 0, totalNumberOfOrders: 0, totalTips: 0, totalUpsells: 0, currencyCode: "", localeCode: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<KPIDashboardReportVM>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: KPIDashboardReportVM): KPIDashboardReportVM {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* Report.KPIDashboardSummaryVM summary */ 1:
                    message.summary = KPIDashboardSummaryVM.internalBinaryRead(reader, reader.uint32(), options, message.summary);
                    break;
                case /* Report.KPIDashboardReportTopSellersVM topSellersByItem */ 2:
                    message.topSellersByItem = KPIDashboardReportTopSellersVM.internalBinaryRead(reader, reader.uint32(), options, message.topSellersByItem);
                    break;
                case /* Report.KPIDashboardReportTopSellersVM topSellersByCategory */ 3:
                    message.topSellersByCategory = KPIDashboardReportTopSellersVM.internalBinaryRead(reader, reader.uint32(), options, message.topSellersByCategory);
                    break;
                case /* Report.KPIDashboardReportCustomersVM customers */ 4:
                    message.customers = KPIDashboardReportCustomersVM.internalBinaryRead(reader, reader.uint32(), options, message.customers);
                    break;
                case /* double averageOrder */ 5:
                    message.averageOrder = reader.double();
                    break;
                case /* double highestOrder */ 6:
                    message.highestOrder = reader.double();
                    break;
                case /* double lowestOrder */ 7:
                    message.lowestOrder = reader.double();
                    break;
                case /* double totalNumberOfOrders */ 8:
                    message.totalNumberOfOrders = reader.double();
                    break;
                case /* double totalTips */ 9:
                    message.totalTips = reader.double();
                    break;
                case /* double totalUpsells */ 10:
                    message.totalUpsells = reader.double();
                    break;
                case /* string currencyCode */ 11:
                    message.currencyCode = reader.string();
                    break;
                case /* string localeCode */ 12:
                    message.localeCode = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: KPIDashboardReportVM, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* Report.KPIDashboardSummaryVM summary = 1; */
        if (message.summary)
            KPIDashboardSummaryVM.internalBinaryWrite(message.summary, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* Report.KPIDashboardReportTopSellersVM topSellersByItem = 2; */
        if (message.topSellersByItem)
            KPIDashboardReportTopSellersVM.internalBinaryWrite(message.topSellersByItem, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* Report.KPIDashboardReportTopSellersVM topSellersByCategory = 3; */
        if (message.topSellersByCategory)
            KPIDashboardReportTopSellersVM.internalBinaryWrite(message.topSellersByCategory, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* Report.KPIDashboardReportCustomersVM customers = 4; */
        if (message.customers)
            KPIDashboardReportCustomersVM.internalBinaryWrite(message.customers, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* double averageOrder = 5; */
        if (message.averageOrder !== 0)
            writer.tag(5, WireType.Bit64).double(message.averageOrder);
        /* double highestOrder = 6; */
        if (message.highestOrder !== 0)
            writer.tag(6, WireType.Bit64).double(message.highestOrder);
        /* double lowestOrder = 7; */
        if (message.lowestOrder !== 0)
            writer.tag(7, WireType.Bit64).double(message.lowestOrder);
        /* double totalNumberOfOrders = 8; */
        if (message.totalNumberOfOrders !== 0)
            writer.tag(8, WireType.Bit64).double(message.totalNumberOfOrders);
        /* double totalTips = 9; */
        if (message.totalTips !== 0)
            writer.tag(9, WireType.Bit64).double(message.totalTips);
        /* double totalUpsells = 10; */
        if (message.totalUpsells !== 0)
            writer.tag(10, WireType.Bit64).double(message.totalUpsells);
        /* string currencyCode = 11; */
        if (message.currencyCode !== "")
            writer.tag(11, WireType.LengthDelimited).string(message.currencyCode);
        /* string localeCode = 12; */
        if (message.localeCode !== "")
            writer.tag(12, WireType.LengthDelimited).string(message.localeCode);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message Report.KPIDashboardReportVM
 */
export const KPIDashboardReportVM = new KPIDashboardReportVM$Type();
// @generated message type with reflection information, may provide speed optimized methods
class KPIDashboardReportCustomersVM$Type extends MessageType<KPIDashboardReportCustomersVM> {
    constructor() {
        super("Report.KPIDashboardReportCustomersVM", [
            { no: 1, name: "reportFields", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => ReportField }
        ]);
    }
    create(value?: PartialMessage<KPIDashboardReportCustomersVM>): KPIDashboardReportCustomersVM {
        const message = { reportFields: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<KPIDashboardReportCustomersVM>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: KPIDashboardReportCustomersVM): KPIDashboardReportCustomersVM {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated Report.ReportField reportFields */ 1:
                    message.reportFields.push(ReportField.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: KPIDashboardReportCustomersVM, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated Report.ReportField reportFields = 1; */
        for (let i = 0; i < message.reportFields.length; i++)
            ReportField.internalBinaryWrite(message.reportFields[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message Report.KPIDashboardReportCustomersVM
 */
export const KPIDashboardReportCustomersVM = new KPIDashboardReportCustomersVM$Type();
// @generated message type with reflection information, may provide speed optimized methods
class KPIDashboardReportTopSellersVM$Type extends MessageType<KPIDashboardReportTopSellersVM> {
    constructor() {
        super("Report.KPIDashboardReportTopSellersVM", [
            { no: 1, name: "reportFields", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => ReportField }
        ]);
    }
    create(value?: PartialMessage<KPIDashboardReportTopSellersVM>): KPIDashboardReportTopSellersVM {
        const message = { reportFields: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<KPIDashboardReportTopSellersVM>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: KPIDashboardReportTopSellersVM): KPIDashboardReportTopSellersVM {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated Report.ReportField reportFields */ 1:
                    message.reportFields.push(ReportField.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: KPIDashboardReportTopSellersVM, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated Report.ReportField reportFields = 1; */
        for (let i = 0; i < message.reportFields.length; i++)
            ReportField.internalBinaryWrite(message.reportFields[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message Report.KPIDashboardReportTopSellersVM
 */
export const KPIDashboardReportTopSellersVM = new KPIDashboardReportTopSellersVM$Type();
// @generated message type with reflection information, may provide speed optimized methods
class KPIDashboardSummaryVM$Type extends MessageType<KPIDashboardSummaryVM> {
    constructor() {
        super("Report.KPIDashboardSummaryVM", [
            { no: 1, name: "reportFields", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => ReportField }
        ]);
    }
    create(value?: PartialMessage<KPIDashboardSummaryVM>): KPIDashboardSummaryVM {
        const message = { reportFields: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<KPIDashboardSummaryVM>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: KPIDashboardSummaryVM): KPIDashboardSummaryVM {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated Report.ReportField reportFields */ 1:
                    message.reportFields.push(ReportField.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: KPIDashboardSummaryVM, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated Report.ReportField reportFields = 1; */
        for (let i = 0; i < message.reportFields.length; i++)
            ReportField.internalBinaryWrite(message.reportFields[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message Report.KPIDashboardSummaryVM
 */
export const KPIDashboardSummaryVM = new KPIDashboardSummaryVM$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ReportField$Type extends MessageType<ReportField> {
    constructor() {
        super("Report.ReportField", [
            { no: 1, name: "label", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "value", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 3, name: "tooltip", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ReportField>): ReportField {
        const message = { label: "", value: 0, tooltip: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ReportField>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ReportField): ReportField {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string label */ 1:
                    message.label = reader.string();
                    break;
                case /* double value */ 2:
                    message.value = reader.double();
                    break;
                case /* string tooltip */ 3:
                    message.tooltip = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ReportField, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string label = 1; */
        if (message.label !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.label);
        /* double value = 2; */
        if (message.value !== 0)
            writer.tag(2, WireType.Bit64).double(message.value);
        /* string tooltip = 3; */
        if (message.tooltip !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.tooltip);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message Report.ReportField
 */
export const ReportField = new ReportField$Type();
