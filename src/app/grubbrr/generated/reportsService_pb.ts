/* eslint-disable */
// @generated by protobuf-ts 2.9.0 with parameter ts_nocheck,eslint_disable,add_pb_suffix,long_type_string,generate_dependencies
// @generated from protobuf file "reportsService.proto" (package "Report", syntax proto3)
// tslint:disable
// @ts-nocheck
import { KPIDashboardReportVM } from "./reports_pb";
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Timestamp } from "./google/protobuf/timestamp_pb";
/**
 * @generated from protobuf message Report.KPIReportRequest
 */
export interface KPIReportRequest {
    /**
     * @generated from protobuf field: string locationId = 1;
     */
    locationId: string;
    /**
     * @generated from protobuf field: google.protobuf.Timestamp startDate = 2;
     */
    startDate?: Timestamp;
    /**
     * @generated from protobuf field: google.protobuf.Timestamp endDate = 3;
     */
    endDate?: Timestamp;
}
// @generated message type with reflection information, may provide speed optimized methods
class KPIReportRequest$Type extends MessageType<KPIReportRequest> {
    constructor() {
        super("Report.KPIReportRequest", [
            { no: 1, name: "locationId", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "startDate", kind: "message", T: () => Timestamp },
            { no: 3, name: "endDate", kind: "message", T: () => Timestamp }
        ]);
    }
    create(value?: PartialMessage<KPIReportRequest>): KPIReportRequest {
        const message = { locationId: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<KPIReportRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: KPIReportRequest): KPIReportRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string locationId */ 1:
                    message.locationId = reader.string();
                    break;
                case /* google.protobuf.Timestamp startDate */ 2:
                    message.startDate = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.startDate);
                    break;
                case /* google.protobuf.Timestamp endDate */ 3:
                    message.endDate = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.endDate);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: KPIReportRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string locationId = 1; */
        if (message.locationId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.locationId);
        /* google.protobuf.Timestamp startDate = 2; */
        if (message.startDate)
            Timestamp.internalBinaryWrite(message.startDate, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* google.protobuf.Timestamp endDate = 3; */
        if (message.endDate)
            Timestamp.internalBinaryWrite(message.endDate, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message Report.KPIReportRequest
 */
export const KPIReportRequest = new KPIReportRequest$Type();
/**
 * @generated ServiceType for protobuf service Report.ReportsService
 */
export const ReportsService = new ServiceType("Report.ReportsService", [
    { name: "GetKPIReport", options: {}, I: KPIReportRequest, O: KPIDashboardReportVM }
]);
